/*
 * Notifications API
 * Notifications API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.telestream.cloud.notifications;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import net.telestream.cloud.notifications.Params;
import net.telestream.cloud.notifications.Topic;

/**
 * Subscription
 */

public class Subscription {
  @SerializedName("id")
  private String id = null;

  /**
   * [required] Type of subscription (email, webhook) 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    EMAIL("email"),
    
    WEBHOOK("webhook");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("topic")
  private Topic topic = null;

  @SerializedName("params")
  private Params params = null;

   /**
   * [read-only] Subscription identifier 
   * @return id
  **/
  @ApiModelProperty(value = "[read-only] Subscription identifier ")
  public String getId() {
    return id;
  }

  public Subscription type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * [required] Type of subscription (email, webhook) 
   * @return type
  **/
  @ApiModelProperty(value = "[required] Type of subscription (email, webhook) ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Subscription topic(Topic topic) {
    this.topic = topic;
    return this;
  }

   /**
   * [required] 
   * @return topic
  **/
  @ApiModelProperty(value = "[required] ")
  public Topic getTopic() {
    return topic;
  }

  public void setTopic(Topic topic) {
    this.topic = topic;
  }

  public Subscription params(Params params) {
    this.params = params;
    return this;
  }

   /**
   * [required] 
   * @return params
  **/
  @ApiModelProperty(value = "[required] ")
  public Params getParams() {
    return params;
  }

  public void setParams(Params params) {
    this.params = params;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.id, subscription.id) &&
        Objects.equals(this.type, subscription.type) &&
        Objects.equals(this.topic, subscription.topic) &&
        Objects.equals(this.params, subscription.params);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, topic, params);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

