/*
 * Tts API
 * Description
 *
 * OpenAPI spec version: 3.1.0
 * Contact: cloudsupport@telestream.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.telestream.cloud.tts;

import net.telestream.cloud.tts.ApiException;
import net.telestream.cloud.tts.CorporaCollection;
import net.telestream.cloud.tts.Corpus;
import net.telestream.cloud.tts.ErrorResponse;
import net.telestream.cloud.tts.Job;
import net.telestream.cloud.tts.JobResult;
import net.telestream.cloud.tts.JobsCollection;
import net.telestream.cloud.tts.Project;
import net.telestream.cloud.tts.ProjectsCollection;
import net.telestream.cloud.tts.UploadSession;
import net.telestream.cloud.tts.VideoUploadBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TtsApi
 */
@Ignore
public class TtsApiTest {

    private final TtsApi api = new TtsApi();

    
    /**
     * Returns a collection of Corpora
     *
     * Returns a collection of Corpora
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void corporaTest() throws ApiException {
        String projectID = null;
        CorporaCollection response = api.corpora(projectID);

        // TODO: test validations
    }
    
    /**
     * Returns the Corpus
     *
     * Returns the Corpus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void corpusTest() throws ApiException {
        String projectID = null;
        String name = null;
        Corpus response = api.corpus(projectID, name);

        // TODO: test validations
    }
    
    /**
     * Creates a new Corpus
     *
     * Creates a new Corpus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCorpusTest() throws ApiException {
        String projectID = null;
        String name = null;
        String body = null;
        api.createCorpus(projectID, name, body);

        // TODO: test validations
    }
    
    /**
     * Creates a new Job
     *
     * Creates a new Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        String projectID = null;
        Job job = null;
        Job response = api.createJob(projectID, job);

        // TODO: test validations
    }
    
    /**
     * Creates a new Project
     *
     * Creates a new Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        Project project = null;
        Project response = api.createProject(project);

        // TODO: test validations
    }
    
    /**
     * Creates a new Corpus
     *
     * Creates a new Corpus
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCorpusTest() throws ApiException {
        String projectID = null;
        String name = null;
        api.deleteCorpus(projectID, name);

        // TODO: test validations
    }
    
    /**
     * Deletes the Job
     *
     * Deletes the Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        String projectID = null;
        String jobId = null;
        api.deleteJob(projectID, jobId);

        // TODO: test validations
    }
    
    /**
     * Deletes the Project
     *
     * Deletes the Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        api.deleteProject();

        // TODO: test validations
    }
    
    /**
     * Returns the Job
     *
     * Returns the Job
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobTest() throws ApiException {
        String projectID = null;
        String jobId = null;
        Job response = api.job(projectID, jobId);

        // TODO: test validations
    }
    
    /**
     * Returns the Job Result
     *
     * Returns the Job Result
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobResultTest() throws ApiException {
        String projectID = null;
        String jobId = null;
        JobResult response = api.jobResult(projectID, jobId);

        // TODO: test validations
    }
    
    /**
     * Returns a collection of Jobs
     *
     * Returns a collection of Jobs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void jobsTest() throws ApiException {
        String projectID = null;
        Integer page = null;
        Integer perPage = null;
        JobsCollection response = api.jobs(projectID, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Returns the Project
     *
     * Returns the Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTest() throws ApiException {
        String projectID = null;
        Project response = api.project(projectID);

        // TODO: test validations
    }
    
    /**
     * Returns a collection of Projects
     *
     * Returns a collection of Projects
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectsTest() throws ApiException {
        ProjectsCollection response = api.projects();

        // TODO: test validations
    }
    
    /**
     * Queues training
     *
     * Queues training
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void trainProjectTest() throws ApiException {
        String projectID = null;
        api.trainProject(projectID);

        // TODO: test validations
    }
    
    /**
     * Updates an existing Project
     *
     * Updates an existing Project
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        Project project = null;
        Project response = api.updateProject(project);

        // TODO: test validations
    }
    
    /**
     * Creates an upload session
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadVideoTest() throws ApiException {
        String projectID = null;
        VideoUploadBody videoUploadBody = null;
        UploadSession response = api.uploadVideo(projectID, videoUploadBody);

        // TODO: test validations
    }
    
}
