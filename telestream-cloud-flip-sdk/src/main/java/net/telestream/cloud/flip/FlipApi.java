/*
 * Flip API
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.telestream.cloud.flip;

import net.telestream.cloud.flip.ApiCallback;
import net.telestream.cloud.flip.ApiClient;
import net.telestream.cloud.flip.ApiException;
import net.telestream.cloud.flip.ApiResponse;
import net.telestream.cloud.flip.Configuration;
import net.telestream.cloud.flip.Pair;
import net.telestream.cloud.flip.ProgressRequestBody;
import net.telestream.cloud.flip.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import net.telestream.cloud.flip.CanceledResponse;
import net.telestream.cloud.flip.CloudNotificationSettings;
import net.telestream.cloud.flip.CopyProfileBody;
import net.telestream.cloud.flip.CountResponse;
import net.telestream.cloud.flip.CreateEncodingBody;
import net.telestream.cloud.flip.CreateVideoBody;
import net.telestream.cloud.flip.DeletedResponse;
import net.telestream.cloud.flip.Encoding;
import net.telestream.cloud.flip.EncodingSignedUrl;
import net.telestream.cloud.flip.EncodingSignedUrls;
import net.telestream.cloud.flip.Error;
import net.telestream.cloud.flip.Factory;
import net.telestream.cloud.flip.FactoryBody;
import net.telestream.cloud.flip.FactorySync;
import net.telestream.cloud.flip.FactorySyncBody;
import java.io.File;
import net.telestream.cloud.flip.PaginatedEncodingsCollection;
import net.telestream.cloud.flip.PaginatedFactoryCollection;
import net.telestream.cloud.flip.PaginatedProfilesCollection;
import net.telestream.cloud.flip.PaginatedVideoCollection;
import net.telestream.cloud.flip.PaginatedWorkflowsCollection;
import net.telestream.cloud.flip.Profile;
import net.telestream.cloud.flip.ProfileBody;
import net.telestream.cloud.flip.ResubmitVideoBody;
import net.telestream.cloud.flip.RetriedResponse;
import net.telestream.cloud.flip.SignedVideoUrl;
import net.telestream.cloud.flip.UpdateEncodingBody;
import net.telestream.cloud.flip.UploadSession;
import net.telestream.cloud.flip.Video;
import net.telestream.cloud.flip.VideoMetadata;
import net.telestream.cloud.flip.VideoUploadBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FlipApi {
    private ApiClient apiClient;

    public FlipApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FlipApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelEncoding
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelEncodingCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/encodings/{id}/cancel.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelEncodingValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelEncoding(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling cancelEncoding(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelEncodingCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancels an Encoding.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return CanceledResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CanceledResponse cancelEncoding(String id, String factoryId) throws ApiException {
        ApiResponse<CanceledResponse> resp = cancelEncodingWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Cancels an Encoding.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;CanceledResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CanceledResponse> cancelEncodingWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = cancelEncodingValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<CanceledResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancels an Encoding. (asynchronously)
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelEncodingAsync(String id, String factoryId, final ApiCallback<CanceledResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelEncodingValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CanceledResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for copyProfile
     * @param id Id of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param copyProfileBody  (required)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyProfileCall(String id, String factoryId, CopyProfileBody copyProfileBody, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = copyProfileBody;

        // create path and map variables
        String localVarPath = "/profiles/{id}/copy.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call copyProfileValidateBeforeCall(String id, String factoryId, CopyProfileBody copyProfileBody, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling copyProfile(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling copyProfile(Async)");
        }
        
        // verify the required parameter 'copyProfileBody' is set
        if (copyProfileBody == null) {
            throw new ApiException("Missing the required parameter 'copyProfileBody' when calling copyProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = copyProfileCall(id, factoryId, copyProfileBody, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Copies a given Profile
     * 
     * @param id Id of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param copyProfileBody  (required)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Profile copyProfile(String id, String factoryId, CopyProfileBody copyProfileBody, Boolean expand) throws ApiException {
        ApiResponse<Profile> resp = copyProfileWithHttpInfo(id, factoryId, copyProfileBody, expand);
        return resp.getData();
    }

    /**
     * Copies a given Profile
     * 
     * @param id Id of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param copyProfileBody  (required)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Profile> copyProfileWithHttpInfo(String id, String factoryId, CopyProfileBody copyProfileBody, Boolean expand) throws ApiException {
        com.squareup.okhttp.Call call = copyProfileValidateBeforeCall(id, factoryId, copyProfileBody, expand, null, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Copies a given Profile (asynchronously)
     * 
     * @param id Id of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param copyProfileBody  (required)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyProfileAsync(String id, String factoryId, CopyProfileBody copyProfileBody, Boolean expand, final ApiCallback<Profile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyProfileValidateBeforeCall(id, factoryId, copyProfileBody, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createEncoding
     * @param factoryId Id of a Factory. (required)
     * @param createEncodingBody  (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createEncodingCall(String factoryId, CreateEncodingBody createEncodingBody, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createEncodingBody;

        // create path and map variables
        String localVarPath = "/encodings.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (screenshots != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenshots", screenshots));
        if (preciseStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("precise_status", preciseStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createEncodingValidateBeforeCall(String factoryId, CreateEncodingBody createEncodingBody, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling createEncoding(Async)");
        }
        
        // verify the required parameter 'createEncodingBody' is set
        if (createEncodingBody == null) {
            throw new ApiException("Missing the required parameter 'createEncodingBody' when calling createEncoding(Async)");
        }
        

        com.squareup.okhttp.Call call = createEncodingCall(factoryId, createEncodingBody, screenshots, preciseStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates an Encoding
     * 
     * @param factoryId Id of a Factory. (required)
     * @param createEncodingBody  (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return Encoding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Encoding createEncoding(String factoryId, CreateEncodingBody createEncodingBody, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        ApiResponse<Encoding> resp = createEncodingWithHttpInfo(factoryId, createEncodingBody, screenshots, preciseStatus);
        return resp.getData();
    }

    /**
     * Creates an Encoding
     * 
     * @param factoryId Id of a Factory. (required)
     * @param createEncodingBody  (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return ApiResponse&lt;Encoding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Encoding> createEncodingWithHttpInfo(String factoryId, CreateEncodingBody createEncodingBody, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        com.squareup.okhttp.Call call = createEncodingValidateBeforeCall(factoryId, createEncodingBody, screenshots, preciseStatus, null, null);
        Type localVarReturnType = new TypeToken<Encoding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an Encoding (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param createEncodingBody  (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createEncodingAsync(String factoryId, CreateEncodingBody createEncodingBody, Boolean screenshots, Boolean preciseStatus, final ApiCallback<Encoding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createEncodingValidateBeforeCall(factoryId, createEncodingBody, screenshots, preciseStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Encoding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createFactory
     * @param createFactoryBody  (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFactoryCall(FactoryBody createFactoryBody, Boolean withStorageProvider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createFactoryBody;

        // create path and map variables
        String localVarPath = "/factories.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (withStorageProvider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_storage_provider", withStorageProvider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createFactoryValidateBeforeCall(FactoryBody createFactoryBody, Boolean withStorageProvider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createFactoryBody' is set
        if (createFactoryBody == null) {
            throw new ApiException("Missing the required parameter 'createFactoryBody' when calling createFactory(Async)");
        }
        

        com.squareup.okhttp.Call call = createFactoryCall(createFactoryBody, withStorageProvider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new factory
     * 
     * @param createFactoryBody  (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @return Factory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Factory createFactory(FactoryBody createFactoryBody, Boolean withStorageProvider) throws ApiException {
        ApiResponse<Factory> resp = createFactoryWithHttpInfo(createFactoryBody, withStorageProvider);
        return resp.getData();
    }

    /**
     * Creates a new factory
     * 
     * @param createFactoryBody  (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @return ApiResponse&lt;Factory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Factory> createFactoryWithHttpInfo(FactoryBody createFactoryBody, Boolean withStorageProvider) throws ApiException {
        com.squareup.okhttp.Call call = createFactoryValidateBeforeCall(createFactoryBody, withStorageProvider, null, null);
        Type localVarReturnType = new TypeToken<Factory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new factory (asynchronously)
     * 
     * @param createFactoryBody  (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFactoryAsync(FactoryBody createFactoryBody, Boolean withStorageProvider, final ApiCallback<Factory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFactoryValidateBeforeCall(createFactoryBody, withStorageProvider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Factory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProfile
     * @param factoryId Id of a Factory. (required)
     * @param createProfileBody  (required)
     * @param excludeAdvancedServices  (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProfileCall(String factoryId, ProfileBody createProfileBody, Boolean excludeAdvancedServices, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createProfileBody;

        // create path and map variables
        String localVarPath = "/profiles.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (excludeAdvancedServices != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_advanced_services", excludeAdvancedServices));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProfileValidateBeforeCall(String factoryId, ProfileBody createProfileBody, Boolean excludeAdvancedServices, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling createProfile(Async)");
        }
        
        // verify the required parameter 'createProfileBody' is set
        if (createProfileBody == null) {
            throw new ApiException("Missing the required parameter 'createProfileBody' when calling createProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = createProfileCall(factoryId, createProfileBody, excludeAdvancedServices, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a Profile
     * 
     * @param factoryId Id of a Factory. (required)
     * @param createProfileBody  (required)
     * @param excludeAdvancedServices  (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Profile createProfile(String factoryId, ProfileBody createProfileBody, Boolean excludeAdvancedServices, Boolean expand) throws ApiException {
        ApiResponse<Profile> resp = createProfileWithHttpInfo(factoryId, createProfileBody, excludeAdvancedServices, expand);
        return resp.getData();
    }

    /**
     * Creates a Profile
     * 
     * @param factoryId Id of a Factory. (required)
     * @param createProfileBody  (required)
     * @param excludeAdvancedServices  (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Profile> createProfileWithHttpInfo(String factoryId, ProfileBody createProfileBody, Boolean excludeAdvancedServices, Boolean expand) throws ApiException {
        com.squareup.okhttp.Call call = createProfileValidateBeforeCall(factoryId, createProfileBody, excludeAdvancedServices, expand, null, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Profile (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param createProfileBody  (required)
     * @param excludeAdvancedServices  (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default it is not set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProfileAsync(String factoryId, ProfileBody createProfileBody, Boolean excludeAdvancedServices, Boolean expand, final ApiCallback<Profile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProfileValidateBeforeCall(factoryId, createProfileBody, excludeAdvancedServices, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createVideo
     * @param factoryId Id of a Factory. (required)
     * @param createVideoBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createVideoCall(String factoryId, CreateVideoBody createVideoBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createVideoBody;

        // create path and map variables
        String localVarPath = "/videos.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createVideoValidateBeforeCall(String factoryId, CreateVideoBody createVideoBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling createVideo(Async)");
        }
        
        // verify the required parameter 'createVideoBody' is set
        if (createVideoBody == null) {
            throw new ApiException("Missing the required parameter 'createVideoBody' when calling createVideo(Async)");
        }
        

        com.squareup.okhttp.Call call = createVideoCall(factoryId, createVideoBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a Video from a provided source_url.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param createVideoBody  (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Video createVideo(String factoryId, CreateVideoBody createVideoBody) throws ApiException {
        ApiResponse<Video> resp = createVideoWithHttpInfo(factoryId, createVideoBody);
        return resp.getData();
    }

    /**
     * Creates a Video from a provided source_url.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param createVideoBody  (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Video> createVideoWithHttpInfo(String factoryId, CreateVideoBody createVideoBody) throws ApiException {
        com.squareup.okhttp.Call call = createVideoValidateBeforeCall(factoryId, createVideoBody, null, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Video from a provided source_url. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param createVideoBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVideoAsync(String factoryId, CreateVideoBody createVideoBody, final ApiCallback<Video> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVideoValidateBeforeCall(factoryId, createVideoBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createWorkorder
     * @param factoryId Id of a Factory. (required)
     * @param profileId Id of a Profile. (optional)
     * @param file Input file. (optional)
     * @param sourceUrl URL pointing to an input file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createWorkorderCall(String factoryId, String profileId, File file, String sourceUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workorders.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (profileId != null)
        localVarFormParams.put("profile_id", profileId);
        if (file != null)
        localVarFormParams.put("file", file);
        if (sourceUrl != null)
        localVarFormParams.put("source_url", sourceUrl);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createWorkorderValidateBeforeCall(String factoryId, String profileId, File file, String sourceUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling createWorkorder(Async)");
        }
        

        com.squareup.okhttp.Call call = createWorkorderCall(factoryId, profileId, file, sourceUrl, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a Workorder.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param profileId Id of a Profile. (optional)
     * @param file Input file. (optional)
     * @param sourceUrl URL pointing to an input file. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createWorkorder(String factoryId, String profileId, File file, String sourceUrl) throws ApiException {
        createWorkorderWithHttpInfo(factoryId, profileId, file, sourceUrl);
    }

    /**
     * Creates a Workorder.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param profileId Id of a Profile. (optional)
     * @param file Input file. (optional)
     * @param sourceUrl URL pointing to an input file. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createWorkorderWithHttpInfo(String factoryId, String profileId, File file, String sourceUrl) throws ApiException {
        com.squareup.okhttp.Call call = createWorkorderValidateBeforeCall(factoryId, profileId, file, sourceUrl, null, null);
        return apiClient.execute(call);
    }

    /**
     * Creates a Workorder. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param profileId Id of a Profile. (optional)
     * @param file Input file. (optional)
     * @param sourceUrl URL pointing to an input file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createWorkorderAsync(String factoryId, String profileId, File file, String sourceUrl, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createWorkorderValidateBeforeCall(factoryId, profileId, file, sourceUrl, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteEncoding
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEncodingCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/encodings/{id}.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteEncodingValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEncoding(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling deleteEncoding(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteEncodingCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return DeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeletedResponse deleteEncoding(String id, String factoryId) throws ApiException {
        ApiResponse<DeletedResponse> resp = deleteEncodingWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;DeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeletedResponse> deleteEncodingWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteEncodingValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<DeletedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful. (asynchronously)
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEncodingAsync(String id, String factoryId, final ApiCallback<DeletedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEncodingValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeletedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteProfile
     * @param id Id of a Profile (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProfileCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{id}.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteProfileValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProfile(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling deleteProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteProfileCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a given Profile
     * 
     * @param id Id of a Profile (required)
     * @param factoryId Id of a Factory. (required)
     * @return DeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeletedResponse deleteProfile(String id, String factoryId) throws ApiException {
        ApiResponse<DeletedResponse> resp = deleteProfileWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Deletes a given Profile
     * 
     * @param id Id of a Profile (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;DeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeletedResponse> deleteProfileWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteProfileValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<DeletedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a given Profile (asynchronously)
     * 
     * @param id Id of a Profile (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProfileAsync(String id, String factoryId, final ApiCallback<DeletedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProfileValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeletedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteVideo
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVideoCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{id}.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVideoValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVideo(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling deleteVideo(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVideoCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Video object.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return DeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeletedResponse deleteVideo(String id, String factoryId) throws ApiException {
        ApiResponse<DeletedResponse> resp = deleteVideoWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Deletes a Video object.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;DeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeletedResponse> deleteVideoWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteVideoValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<DeletedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Video object. (asynchronously)
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVideoAsync(String id, String factoryId, final ApiCallback<DeletedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVideoValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeletedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteVideoSource
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVideoSourceCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{id}/source.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVideoSourceValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVideoSource(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling deleteVideoSource(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVideoSourceCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a video&#39;s source file.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return DeletedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeletedResponse deleteVideoSource(String id, String factoryId) throws ApiException {
        ApiResponse<DeletedResponse> resp = deleteVideoSourceWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Delete a video&#39;s source file.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;DeletedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeletedResponse> deleteVideoSourceWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteVideoSourceValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<DeletedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a video&#39;s source file. (asynchronously)
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVideoSourceAsync(String id, String factoryId, final ApiCallback<DeletedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVideoSourceValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeletedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for encoding
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call encodingCall(String id, String factoryId, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/encodings/{id}.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (screenshots != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenshots", screenshots));
        if (preciseStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("precise_status", preciseStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call encodingValidateBeforeCall(String id, String factoryId, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling encoding(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling encoding(Async)");
        }
        

        com.squareup.okhttp.Call call = encodingCall(id, factoryId, screenshots, preciseStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns an Encoding object.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return Encoding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Encoding encoding(String id, String factoryId, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        ApiResponse<Encoding> resp = encodingWithHttpInfo(id, factoryId, screenshots, preciseStatus);
        return resp.getData();
    }

    /**
     * Returns an Encoding object.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return ApiResponse&lt;Encoding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Encoding> encodingWithHttpInfo(String id, String factoryId, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        com.squareup.okhttp.Call call = encodingValidateBeforeCall(id, factoryId, screenshots, preciseStatus, null, null);
        Type localVarReturnType = new TypeToken<Encoding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns an Encoding object. (asynchronously)
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call encodingAsync(String id, String factoryId, Boolean screenshots, Boolean preciseStatus, final ApiCallback<Encoding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = encodingValidateBeforeCall(id, factoryId, screenshots, preciseStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Encoding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for encodings
     * @param factoryId Id of a Factory. (required)
     * @param videoId Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)
     * @param status One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)
     * @param profileId Filter by profile_id. (optional)
     * @param profileName Filter by profile_name. (optional)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call encodingsCall(String factoryId, String videoId, String status, String profileId, String profileName, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/encodings.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (videoId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("video_id", videoId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (profileId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("profile_id", profileId));
        if (profileName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("profile_name", profileName));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (screenshots != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenshots", screenshots));
        if (preciseStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("precise_status", preciseStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call encodingsValidateBeforeCall(String factoryId, String videoId, String status, String profileId, String profileName, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling encodings(Async)");
        }
        

        com.squareup.okhttp.Call call = encodingsCall(factoryId, videoId, status, profileId, profileName, page, perPage, screenshots, preciseStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of Encoding objects
     * 
     * @param factoryId Id of a Factory. (required)
     * @param videoId Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)
     * @param status One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)
     * @param profileId Filter by profile_id. (optional)
     * @param profileName Filter by profile_name. (optional)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return PaginatedEncodingsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedEncodingsCollection encodings(String factoryId, String videoId, String status, String profileId, String profileName, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        ApiResponse<PaginatedEncodingsCollection> resp = encodingsWithHttpInfo(factoryId, videoId, status, profileId, profileName, page, perPage, screenshots, preciseStatus);
        return resp.getData();
    }

    /**
     * Returns a list of Encoding objects
     * 
     * @param factoryId Id of a Factory. (required)
     * @param videoId Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)
     * @param status One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)
     * @param profileId Filter by profile_id. (optional)
     * @param profileName Filter by profile_name. (optional)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return ApiResponse&lt;PaginatedEncodingsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedEncodingsCollection> encodingsWithHttpInfo(String factoryId, String videoId, String status, String profileId, String profileName, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        com.squareup.okhttp.Call call = encodingsValidateBeforeCall(factoryId, videoId, status, profileId, profileName, page, perPage, screenshots, preciseStatus, null, null);
        Type localVarReturnType = new TypeToken<PaginatedEncodingsCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of Encoding objects (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param videoId Id of a Video. When specified, the resulting list will contain videos that belong to the Video. (optional)
     * @param status One of &#x60;success&#x60;, &#x60;fail&#x60;, &#x60;processing&#x60;. When specified, the resulting list will contain ecodings filtered by status. (optional)
     * @param profileId Filter by profile_id. (optional)
     * @param profileName Filter by profile_name. (optional)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call encodingsAsync(String factoryId, String videoId, String status, String profileId, String profileName, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus, final ApiCallback<PaginatedEncodingsCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = encodingsValidateBeforeCall(factoryId, videoId, status, profileId, profileName, page, perPage, screenshots, preciseStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedEncodingsCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for encodingsCount
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call encodingsCountCall(String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/encodings/count.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call encodingsCountValidateBeforeCall(String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling encodingsCount(Async)");
        }
        

        com.squareup.okhttp.Call call = encodingsCountCall(factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a number of Encoding objects created using a given factory.
     * 
     * @param factoryId Id of a Factory. (required)
     * @return CountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CountResponse encodingsCount(String factoryId) throws ApiException {
        ApiResponse<CountResponse> resp = encodingsCountWithHttpInfo(factoryId);
        return resp.getData();
    }

    /**
     * Returns a number of Encoding objects created using a given factory.
     * 
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;CountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CountResponse> encodingsCountWithHttpInfo(String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = encodingsCountValidateBeforeCall(factoryId, null, null);
        Type localVarReturnType = new TypeToken<CountResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a number of Encoding objects created using a given factory. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call encodingsCountAsync(String factoryId, final ApiCallback<CountResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = encodingsCountValidateBeforeCall(factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CountResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for factories
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call factoriesCall(Integer page, Integer perPage, Boolean withStorageProvider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/factories.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (withStorageProvider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_storage_provider", withStorageProvider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call factoriesValidateBeforeCall(Integer page, Integer perPage, Boolean withStorageProvider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = factoriesCall(page, perPage, withStorageProvider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a collection of Factory objects.
     * Returns a collection of Factory objects.
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @return PaginatedFactoryCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedFactoryCollection factories(Integer page, Integer perPage, Boolean withStorageProvider) throws ApiException {
        ApiResponse<PaginatedFactoryCollection> resp = factoriesWithHttpInfo(page, perPage, withStorageProvider);
        return resp.getData();
    }

    /**
     * Returns a collection of Factory objects.
     * Returns a collection of Factory objects.
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @return ApiResponse&lt;PaginatedFactoryCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedFactoryCollection> factoriesWithHttpInfo(Integer page, Integer perPage, Boolean withStorageProvider) throws ApiException {
        com.squareup.okhttp.Call call = factoriesValidateBeforeCall(page, perPage, withStorageProvider, null, null);
        Type localVarReturnType = new TypeToken<PaginatedFactoryCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a collection of Factory objects. (asynchronously)
     * Returns a collection of Factory objects.
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call factoriesAsync(Integer page, Integer perPage, Boolean withStorageProvider, final ApiCallback<PaginatedFactoryCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = factoriesValidateBeforeCall(page, perPage, withStorageProvider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedFactoryCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for factory
     * @param id id of a factory (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call factoryCall(String id, Boolean withStorageProvider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/factories/{id}.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (withStorageProvider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_storage_provider", withStorageProvider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call factoryValidateBeforeCall(String id, Boolean withStorageProvider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling factory(Async)");
        }
        

        com.squareup.okhttp.Call call = factoryCall(id, withStorageProvider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a Factory object.
     * Returns a Factory object.
     * @param id id of a factory (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @return Factory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Factory factory(String id, Boolean withStorageProvider) throws ApiException {
        ApiResponse<Factory> resp = factoryWithHttpInfo(id, withStorageProvider);
        return resp.getData();
    }

    /**
     * Returns a Factory object.
     * Returns a Factory object.
     * @param id id of a factory (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @return ApiResponse&lt;Factory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Factory> factoryWithHttpInfo(String id, Boolean withStorageProvider) throws ApiException {
        com.squareup.okhttp.Call call = factoryValidateBeforeCall(id, withStorageProvider, null, null);
        Type localVarReturnType = new TypeToken<Factory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a Factory object. (asynchronously)
     * Returns a Factory object.
     * @param id id of a factory (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call factoryAsync(String id, Boolean withStorageProvider, final ApiCallback<Factory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = factoryValidateBeforeCall(id, withStorageProvider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Factory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for notifications
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notificationsCall(String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call notificationsValidateBeforeCall(String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling notifications(Async)");
        }
        

        com.squareup.okhttp.Call call = notificationsCall(factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a Factory&#39;s notification settings.
     * 
     * @param factoryId Id of a Factory. (required)
     * @return CloudNotificationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudNotificationSettings notifications(String factoryId) throws ApiException {
        ApiResponse<CloudNotificationSettings> resp = notificationsWithHttpInfo(factoryId);
        return resp.getData();
    }

    /**
     * Returns a Factory&#39;s notification settings.
     * 
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;CloudNotificationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudNotificationSettings> notificationsWithHttpInfo(String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = notificationsValidateBeforeCall(factoryId, null, null);
        Type localVarReturnType = new TypeToken<CloudNotificationSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a Factory&#39;s notification settings. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notificationsAsync(String factoryId, final ApiCallback<CloudNotificationSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notificationsValidateBeforeCall(factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudNotificationSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profile
     * @param idOrName A name or an id of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profileCall(String idOrName, String factoryId, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{id_or_name}.json"
            .replaceAll("\\{" + "id_or_name" + "\\}", apiClient.escapeString(idOrName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profileValidateBeforeCall(String idOrName, String factoryId, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idOrName' is set
        if (idOrName == null) {
            throw new ApiException("Missing the required parameter 'idOrName' when calling profile(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling profile(Async)");
        }
        

        com.squareup.okhttp.Call call = profileCall(idOrName, factoryId, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a Profile object.
     * 
     * @param idOrName A name or an id of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Profile profile(String idOrName, String factoryId, Boolean expand) throws ApiException {
        ApiResponse<Profile> resp = profileWithHttpInfo(idOrName, factoryId, expand);
        return resp.getData();
    }

    /**
     * Returns a Profile object.
     * 
     * @param idOrName A name or an id of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Profile> profileWithHttpInfo(String idOrName, String factoryId, Boolean expand) throws ApiException {
        com.squareup.okhttp.Call call = profileValidateBeforeCall(idOrName, factoryId, expand, null, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a Profile object. (asynchronously)
     * 
     * @param idOrName A name or an id of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profileAsync(String idOrName, String factoryId, Boolean expand, final ApiCallback<Profile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profileValidateBeforeCall(idOrName, factoryId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profileEncodings
     * @param idOrName Id or name of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profileEncodingsCall(String idOrName, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles/{id_or_name}/encodings.json"
            .replaceAll("\\{" + "id_or_name" + "\\}", apiClient.escapeString(idOrName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profileEncodingsValidateBeforeCall(String idOrName, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'idOrName' is set
        if (idOrName == null) {
            throw new ApiException("Missing the required parameter 'idOrName' when calling profileEncodings(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling profileEncodings(Async)");
        }
        

        com.squareup.okhttp.Call call = profileEncodingsCall(idOrName, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of Encodings that belong to a Profile.
     * 
     * @param idOrName Id or name of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @return PaginatedEncodingsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedEncodingsCollection profileEncodings(String idOrName, String factoryId) throws ApiException {
        ApiResponse<PaginatedEncodingsCollection> resp = profileEncodingsWithHttpInfo(idOrName, factoryId);
        return resp.getData();
    }

    /**
     * Returns a list of Encodings that belong to a Profile.
     * 
     * @param idOrName Id or name of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;PaginatedEncodingsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedEncodingsCollection> profileEncodingsWithHttpInfo(String idOrName, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = profileEncodingsValidateBeforeCall(idOrName, factoryId, null, null);
        Type localVarReturnType = new TypeToken<PaginatedEncodingsCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of Encodings that belong to a Profile. (asynchronously)
     * 
     * @param idOrName Id or name of a Profile. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profileEncodingsAsync(String idOrName, String factoryId, final ApiCallback<PaginatedEncodingsCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profileEncodingsValidateBeforeCall(idOrName, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedEncodingsCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for profiles
     * @param factoryId Id of a Factory. (required)
     * @param excludeAdvancedServices Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call profilesCall(String factoryId, Boolean excludeAdvancedServices, Boolean expand, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (excludeAdvancedServices != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_advanced_services", excludeAdvancedServices));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call profilesValidateBeforeCall(String factoryId, Boolean excludeAdvancedServices, Boolean expand, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling profiles(Async)");
        }
        

        com.squareup.okhttp.Call call = profilesCall(factoryId, excludeAdvancedServices, expand, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a collection of Profile objects.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param excludeAdvancedServices Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @return PaginatedProfilesCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedProfilesCollection profiles(String factoryId, Boolean excludeAdvancedServices, Boolean expand, Integer page, Integer perPage) throws ApiException {
        ApiResponse<PaginatedProfilesCollection> resp = profilesWithHttpInfo(factoryId, excludeAdvancedServices, expand, page, perPage);
        return resp.getData();
    }

    /**
     * Returns a collection of Profile objects.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param excludeAdvancedServices Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @return ApiResponse&lt;PaginatedProfilesCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedProfilesCollection> profilesWithHttpInfo(String factoryId, Boolean excludeAdvancedServices, Boolean expand, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = profilesValidateBeforeCall(factoryId, excludeAdvancedServices, expand, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<PaginatedProfilesCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a collection of Profile objects. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param excludeAdvancedServices Determine whether exclude Advanced Services profiles from the results. By default this is not set. (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call profilesAsync(String factoryId, Boolean excludeAdvancedServices, Boolean expand, Integer page, Integer perPage, final ApiCallback<PaginatedProfilesCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = profilesValidateBeforeCall(factoryId, excludeAdvancedServices, expand, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedProfilesCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queuedVideos
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queuedVideosCall(String factoryId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/queued.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queuedVideosValidateBeforeCall(String factoryId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling queuedVideos(Async)");
        }
        

        com.squareup.okhttp.Call call = queuedVideosCall(factoryId, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a collection of Video objects queued for encoding.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @return PaginatedVideoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedVideoCollection queuedVideos(String factoryId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<PaginatedVideoCollection> resp = queuedVideosWithHttpInfo(factoryId, page, perPage);
        return resp.getData();
    }

    /**
     * Returns a collection of Video objects queued for encoding.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @return ApiResponse&lt;PaginatedVideoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedVideoCollection> queuedVideosWithHttpInfo(String factoryId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = queuedVideosValidateBeforeCall(factoryId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<PaginatedVideoCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a collection of Video objects queued for encoding. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queuedVideosAsync(String factoryId, Integer page, Integer perPage, final ApiCallback<PaginatedVideoCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queuedVideosValidateBeforeCall(factoryId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedVideoCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resubmitVideo
     * @param factoryId Id of a Factory. (required)
     * @param resubmitVideoBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resubmitVideoCall(String factoryId, ResubmitVideoBody resubmitVideoBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resubmitVideoBody;

        // create path and map variables
        String localVarPath = "/videos/resubmit.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resubmitVideoValidateBeforeCall(String factoryId, ResubmitVideoBody resubmitVideoBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling resubmitVideo(Async)");
        }
        
        // verify the required parameter 'resubmitVideoBody' is set
        if (resubmitVideoBody == null) {
            throw new ApiException("Missing the required parameter 'resubmitVideoBody' when calling resubmitVideo(Async)");
        }
        

        com.squareup.okhttp.Call call = resubmitVideoCall(factoryId, resubmitVideoBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Resubmits a video to encode.
     * Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
     * @param factoryId Id of a Factory. (required)
     * @param resubmitVideoBody  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void resubmitVideo(String factoryId, ResubmitVideoBody resubmitVideoBody) throws ApiException {
        resubmitVideoWithHttpInfo(factoryId, resubmitVideoBody);
    }

    /**
     * Resubmits a video to encode.
     * Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
     * @param factoryId Id of a Factory. (required)
     * @param resubmitVideoBody  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> resubmitVideoWithHttpInfo(String factoryId, ResubmitVideoBody resubmitVideoBody) throws ApiException {
        com.squareup.okhttp.Call call = resubmitVideoValidateBeforeCall(factoryId, resubmitVideoBody, null, null);
        return apiClient.execute(call);
    }

    /**
     * Resubmits a video to encode. (asynchronously)
     * Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
     * @param factoryId Id of a Factory. (required)
     * @param resubmitVideoBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resubmitVideoAsync(String factoryId, ResubmitVideoBody resubmitVideoBody, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resubmitVideoValidateBeforeCall(factoryId, resubmitVideoBody, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for retryEncoding
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call retryEncodingCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/encodings/{id}/retry.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call retryEncodingValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retryEncoding(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling retryEncoding(Async)");
        }
        

        com.squareup.okhttp.Call call = retryEncodingCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retries a failed encoding.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return RetriedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RetriedResponse retryEncoding(String id, String factoryId) throws ApiException {
        ApiResponse<RetriedResponse> resp = retryEncodingWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Retries a failed encoding.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;RetriedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RetriedResponse> retryEncodingWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = retryEncodingValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<RetriedResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retries a failed encoding. (asynchronously)
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call retryEncodingAsync(String id, String factoryId, final ApiCallback<RetriedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = retryEncodingValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RetriedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signedEncodingUrl
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signedEncodingUrlCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/encodings/{id}/signed-url.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signedEncodingUrlValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling signedEncodingUrl(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling signedEncodingUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = signedEncodingUrlCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a signed url pointing to an Encoding.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return EncodingSignedUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EncodingSignedUrl signedEncodingUrl(String id, String factoryId) throws ApiException {
        ApiResponse<EncodingSignedUrl> resp = signedEncodingUrlWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Returns a signed url pointing to an Encoding.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;EncodingSignedUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EncodingSignedUrl> signedEncodingUrlWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = signedEncodingUrlValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<EncodingSignedUrl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a signed url pointing to an Encoding. (asynchronously)
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signedEncodingUrlAsync(String id, String factoryId, final ApiCallback<EncodingSignedUrl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signedEncodingUrlValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EncodingSignedUrl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signedEncodingUrls
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signedEncodingUrlsCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/encodings/{id}/signed-urls.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signedEncodingUrlsValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling signedEncodingUrls(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling signedEncodingUrls(Async)");
        }
        

        com.squareup.okhttp.Call call = signedEncodingUrlsCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of signed urls pointing to an Encoding&#39;s outputs.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return EncodingSignedUrls
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EncodingSignedUrls signedEncodingUrls(String id, String factoryId) throws ApiException {
        ApiResponse<EncodingSignedUrls> resp = signedEncodingUrlsWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Returns a list of signed urls pointing to an Encoding&#39;s outputs.
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;EncodingSignedUrls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EncodingSignedUrls> signedEncodingUrlsWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = signedEncodingUrlsValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<EncodingSignedUrls>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of signed urls pointing to an Encoding&#39;s outputs. (asynchronously)
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signedEncodingUrlsAsync(String id, String factoryId, final ApiCallback<EncodingSignedUrls> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signedEncodingUrlsValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EncodingSignedUrls>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for signedVideoUrl
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call signedVideoUrlCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{id}/signed-url.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call signedVideoUrlValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling signedVideoUrl(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling signedVideoUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = signedVideoUrlCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a signed url pointing to a Video.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return SignedVideoUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SignedVideoUrl signedVideoUrl(String id, String factoryId) throws ApiException {
        ApiResponse<SignedVideoUrl> resp = signedVideoUrlWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Returns a signed url pointing to a Video.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;SignedVideoUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SignedVideoUrl> signedVideoUrlWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = signedVideoUrlValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<SignedVideoUrl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a signed url pointing to a Video. (asynchronously)
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call signedVideoUrlAsync(String id, String factoryId, final ApiCallback<SignedVideoUrl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = signedVideoUrlValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SignedVideoUrl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for toggleFactorySync
     * @param id id of the factory (required)
     * @param factorySyncBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call toggleFactorySyncCall(String id, FactorySyncBody factorySyncBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = factorySyncBody;

        // create path and map variables
        String localVarPath = "/factories/{id}/sync.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call toggleFactorySyncValidateBeforeCall(String id, FactorySyncBody factorySyncBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling toggleFactorySync(Async)");
        }
        
        // verify the required parameter 'factorySyncBody' is set
        if (factorySyncBody == null) {
            throw new ApiException("Missing the required parameter 'factorySyncBody' when calling toggleFactorySync(Async)");
        }
        

        com.squareup.okhttp.Call call = toggleFactorySyncCall(id, factorySyncBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Toggles synchronisation settings.
     * 
     * @param id id of the factory (required)
     * @param factorySyncBody  (required)
     * @return FactorySync
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FactorySync toggleFactorySync(String id, FactorySyncBody factorySyncBody) throws ApiException {
        ApiResponse<FactorySync> resp = toggleFactorySyncWithHttpInfo(id, factorySyncBody);
        return resp.getData();
    }

    /**
     * Toggles synchronisation settings.
     * 
     * @param id id of the factory (required)
     * @param factorySyncBody  (required)
     * @return ApiResponse&lt;FactorySync&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FactorySync> toggleFactorySyncWithHttpInfo(String id, FactorySyncBody factorySyncBody) throws ApiException {
        com.squareup.okhttp.Call call = toggleFactorySyncValidateBeforeCall(id, factorySyncBody, null, null);
        Type localVarReturnType = new TypeToken<FactorySync>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Toggles synchronisation settings. (asynchronously)
     * 
     * @param id id of the factory (required)
     * @param factorySyncBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call toggleFactorySyncAsync(String id, FactorySyncBody factorySyncBody, final ApiCallback<FactorySync> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = toggleFactorySyncValidateBeforeCall(id, factorySyncBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FactorySync>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateEncoding
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param updateEncodingBody  (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateEncodingCall(String id, String factoryId, UpdateEncodingBody updateEncodingBody, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateEncodingBody;

        // create path and map variables
        String localVarPath = "/encodings/{id}.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (screenshots != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenshots", screenshots));
        if (preciseStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("precise_status", preciseStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateEncodingValidateBeforeCall(String id, String factoryId, UpdateEncodingBody updateEncodingBody, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEncoding(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling updateEncoding(Async)");
        }
        
        // verify the required parameter 'updateEncodingBody' is set
        if (updateEncodingBody == null) {
            throw new ApiException("Missing the required parameter 'updateEncodingBody' when calling updateEncoding(Async)");
        }
        

        com.squareup.okhttp.Call call = updateEncodingCall(id, factoryId, updateEncodingBody, screenshots, preciseStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates an Encoding
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param updateEncodingBody  (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return Encoding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Encoding updateEncoding(String id, String factoryId, UpdateEncodingBody updateEncodingBody, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        ApiResponse<Encoding> resp = updateEncodingWithHttpInfo(id, factoryId, updateEncodingBody, screenshots, preciseStatus);
        return resp.getData();
    }

    /**
     * Updates an Encoding
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param updateEncodingBody  (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return ApiResponse&lt;Encoding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Encoding> updateEncodingWithHttpInfo(String id, String factoryId, UpdateEncodingBody updateEncodingBody, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        com.squareup.okhttp.Call call = updateEncodingValidateBeforeCall(id, factoryId, updateEncodingBody, screenshots, preciseStatus, null, null);
        Type localVarReturnType = new TypeToken<Encoding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an Encoding (asynchronously)
     * 
     * @param id Id of an Encoding. (required)
     * @param factoryId Id of a Factory. (required)
     * @param updateEncodingBody  (required)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateEncodingAsync(String id, String factoryId, UpdateEncodingBody updateEncodingBody, Boolean screenshots, Boolean preciseStatus, final ApiCallback<Encoding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateEncodingValidateBeforeCall(id, factoryId, updateEncodingBody, screenshots, preciseStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Encoding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateFactory
     * @param id id of the factory (required)
     * @param updateFactoryBody  (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateFactoryCall(String id, FactoryBody updateFactoryBody, Boolean withStorageProvider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateFactoryBody;

        // create path and map variables
        String localVarPath = "/factories/{id}.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (withStorageProvider != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("with_storage_provider", withStorageProvider));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateFactoryValidateBeforeCall(String id, FactoryBody updateFactoryBody, Boolean withStorageProvider, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateFactory(Async)");
        }
        
        // verify the required parameter 'updateFactoryBody' is set
        if (updateFactoryBody == null) {
            throw new ApiException("Missing the required parameter 'updateFactoryBody' when calling updateFactory(Async)");
        }
        

        com.squareup.okhttp.Call call = updateFactoryCall(id, updateFactoryBody, withStorageProvider, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Factory&#39;s settings. Returns a Factory object.
     * 
     * @param id id of the factory (required)
     * @param updateFactoryBody  (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @return Factory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Factory updateFactory(String id, FactoryBody updateFactoryBody, Boolean withStorageProvider) throws ApiException {
        ApiResponse<Factory> resp = updateFactoryWithHttpInfo(id, updateFactoryBody, withStorageProvider);
        return resp.getData();
    }

    /**
     * Updates a Factory&#39;s settings. Returns a Factory object.
     * 
     * @param id id of the factory (required)
     * @param updateFactoryBody  (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @return ApiResponse&lt;Factory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Factory> updateFactoryWithHttpInfo(String id, FactoryBody updateFactoryBody, Boolean withStorageProvider) throws ApiException {
        com.squareup.okhttp.Call call = updateFactoryValidateBeforeCall(id, updateFactoryBody, withStorageProvider, null, null);
        Type localVarReturnType = new TypeToken<Factory>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Factory&#39;s settings. Returns a Factory object. (asynchronously)
     * 
     * @param id id of the factory (required)
     * @param updateFactoryBody  (required)
     * @param withStorageProvider if set to &#x60;true&#x60;, results will include a storage provider&#39;s id (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFactoryAsync(String id, FactoryBody updateFactoryBody, Boolean withStorageProvider, final ApiCallback<Factory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFactoryValidateBeforeCall(id, updateFactoryBody, withStorageProvider, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Factory>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNotifications
     * @param factoryId Id of a Factory. (required)
     * @param cloudNotificationSettingsBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNotificationsCall(String factoryId, CloudNotificationSettings cloudNotificationSettingsBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = cloudNotificationSettingsBody;

        // create path and map variables
        String localVarPath = "/notifications.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNotificationsValidateBeforeCall(String factoryId, CloudNotificationSettings cloudNotificationSettingsBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling updateNotifications(Async)");
        }
        
        // verify the required parameter 'cloudNotificationSettingsBody' is set
        if (cloudNotificationSettingsBody == null) {
            throw new ApiException("Missing the required parameter 'cloudNotificationSettingsBody' when calling updateNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = updateNotificationsCall(factoryId, cloudNotificationSettingsBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Factory&#39;s notification settings.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param cloudNotificationSettingsBody  (required)
     * @return CloudNotificationSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CloudNotificationSettings updateNotifications(String factoryId, CloudNotificationSettings cloudNotificationSettingsBody) throws ApiException {
        ApiResponse<CloudNotificationSettings> resp = updateNotificationsWithHttpInfo(factoryId, cloudNotificationSettingsBody);
        return resp.getData();
    }

    /**
     * Updates a Factory&#39;s notification settings.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param cloudNotificationSettingsBody  (required)
     * @return ApiResponse&lt;CloudNotificationSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CloudNotificationSettings> updateNotificationsWithHttpInfo(String factoryId, CloudNotificationSettings cloudNotificationSettingsBody) throws ApiException {
        com.squareup.okhttp.Call call = updateNotificationsValidateBeforeCall(factoryId, cloudNotificationSettingsBody, null, null);
        Type localVarReturnType = new TypeToken<CloudNotificationSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Factory&#39;s notification settings. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param cloudNotificationSettingsBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNotificationsAsync(String factoryId, CloudNotificationSettings cloudNotificationSettingsBody, final ApiCallback<CloudNotificationSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNotificationsValidateBeforeCall(factoryId, cloudNotificationSettingsBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CloudNotificationSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateProfile
     * @param id  (required)
     * @param factoryId Id of a Factory. (required)
     * @param updateProfileBody  (required)
     * @param excludeAdvancedServices  (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateProfileCall(String id, String factoryId, ProfileBody updateProfileBody, Boolean excludeAdvancedServices, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateProfileBody;

        // create path and map variables
        String localVarPath = "/profiles/{id}.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (excludeAdvancedServices != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exclude_advanced_services", excludeAdvancedServices));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateProfileValidateBeforeCall(String id, String factoryId, ProfileBody updateProfileBody, Boolean excludeAdvancedServices, Boolean expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateProfile(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling updateProfile(Async)");
        }
        
        // verify the required parameter 'updateProfileBody' is set
        if (updateProfileBody == null) {
            throw new ApiException("Missing the required parameter 'updateProfileBody' when calling updateProfile(Async)");
        }
        

        com.squareup.okhttp.Call call = updateProfileCall(id, factoryId, updateProfileBody, excludeAdvancedServices, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a given Profile
     * 
     * @param id  (required)
     * @param factoryId Id of a Factory. (required)
     * @param updateProfileBody  (required)
     * @param excludeAdvancedServices  (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @return Profile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Profile updateProfile(String id, String factoryId, ProfileBody updateProfileBody, Boolean excludeAdvancedServices, Boolean expand) throws ApiException {
        ApiResponse<Profile> resp = updateProfileWithHttpInfo(id, factoryId, updateProfileBody, excludeAdvancedServices, expand);
        return resp.getData();
    }

    /**
     * Updates a given Profile
     * 
     * @param id  (required)
     * @param factoryId Id of a Factory. (required)
     * @param updateProfileBody  (required)
     * @param excludeAdvancedServices  (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @return ApiResponse&lt;Profile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Profile> updateProfileWithHttpInfo(String id, String factoryId, ProfileBody updateProfileBody, Boolean excludeAdvancedServices, Boolean expand) throws ApiException {
        com.squareup.okhttp.Call call = updateProfileValidateBeforeCall(id, factoryId, updateProfileBody, excludeAdvancedServices, expand, null, null);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a given Profile (asynchronously)
     * 
     * @param id  (required)
     * @param factoryId Id of a Factory. (required)
     * @param updateProfileBody  (required)
     * @param excludeAdvancedServices  (optional)
     * @param expand If expand option is set Profile objects will contain all command parameters, even if their value is default. By default this is not set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateProfileAsync(String id, String factoryId, ProfileBody updateProfileBody, Boolean excludeAdvancedServices, Boolean expand, final ApiCallback<Profile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateProfileValidateBeforeCall(id, factoryId, updateProfileBody, excludeAdvancedServices, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Profile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadVideo
     * @param factoryId Id of a Factory. (required)
     * @param videoUploadBody  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadVideoCall(String factoryId, VideoUploadBody videoUploadBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = videoUploadBody;

        // create path and map variables
        String localVarPath = "/videos/upload.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadVideoValidateBeforeCall(String factoryId, VideoUploadBody videoUploadBody, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling uploadVideo(Async)");
        }
        
        // verify the required parameter 'videoUploadBody' is set
        if (videoUploadBody == null) {
            throw new ApiException("Missing the required parameter 'videoUploadBody' when calling uploadVideo(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadVideoCall(factoryId, videoUploadBody, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates an upload session.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param videoUploadBody  (required)
     * @return UploadSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UploadSession uploadVideo(String factoryId, VideoUploadBody videoUploadBody) throws ApiException {
        ApiResponse<UploadSession> resp = uploadVideoWithHttpInfo(factoryId, videoUploadBody);
        return resp.getData();
    }

    /**
     * Creates an upload session.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param videoUploadBody  (required)
     * @return ApiResponse&lt;UploadSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UploadSession> uploadVideoWithHttpInfo(String factoryId, VideoUploadBody videoUploadBody) throws ApiException {
        com.squareup.okhttp.Call call = uploadVideoValidateBeforeCall(factoryId, videoUploadBody, null, null);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates an upload session. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param videoUploadBody  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadVideoAsync(String factoryId, VideoUploadBody videoUploadBody, final ApiCallback<UploadSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadVideoValidateBeforeCall(factoryId, videoUploadBody, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UploadSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for video
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call videoCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{id}.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call videoValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling video(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling video(Async)");
        }
        

        com.squareup.okhttp.Call call = videoCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a Video object.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Video video(String id, String factoryId) throws ApiException {
        ApiResponse<Video> resp = videoWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Returns a Video object.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Video> videoWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = videoValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a Video object. (asynchronously)
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoAsync(String id, String factoryId, final ApiCallback<Video> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for videoEncodings
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call videoEncodingsCall(String id, String factoryId, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{id}/encodings.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));
        if (screenshots != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("screenshots", screenshots));
        if (preciseStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("precise_status", preciseStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call videoEncodingsValidateBeforeCall(String id, String factoryId, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling videoEncodings(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling videoEncodings(Async)");
        }
        

        com.squareup.okhttp.Call call = videoEncodingsCall(id, factoryId, page, perPage, screenshots, preciseStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a list of Encodings that belong to a Video.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return PaginatedEncodingsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedEncodingsCollection videoEncodings(String id, String factoryId, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        ApiResponse<PaginatedEncodingsCollection> resp = videoEncodingsWithHttpInfo(id, factoryId, page, perPage, screenshots, preciseStatus);
        return resp.getData();
    }

    /**
     * Returns a list of Encodings that belong to a Video.
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @return ApiResponse&lt;PaginatedEncodingsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedEncodingsCollection> videoEncodingsWithHttpInfo(String id, String factoryId, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus) throws ApiException {
        com.squareup.okhttp.Call call = videoEncodingsValidateBeforeCall(id, factoryId, page, perPage, screenshots, preciseStatus, null, null);
        Type localVarReturnType = new TypeToken<PaginatedEncodingsCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of Encodings that belong to a Video. (asynchronously)
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param screenshots Determines whether the response will include screenshots. By default this is not set. (optional)
     * @param preciseStatus Determines whether the response will include a precise status. By default this is not set. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoEncodingsAsync(String id, String factoryId, Integer page, Integer perPage, Boolean screenshots, Boolean preciseStatus, final ApiCallback<PaginatedEncodingsCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoEncodingsValidateBeforeCall(id, factoryId, page, perPage, screenshots, preciseStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedEncodingsCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for videoMetadata
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call videoMetadataCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos/{id}/metadata.json"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call videoMetadataValidateBeforeCall(String id, String factoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling videoMetadata(Async)");
        }
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling videoMetadata(Async)");
        }
        

        com.squareup.okhttp.Call call = videoMetadataCall(id, factoryId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a Video&#39;s metadata
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return VideoMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VideoMetadata videoMetadata(String id, String factoryId) throws ApiException {
        ApiResponse<VideoMetadata> resp = videoMetadataWithHttpInfo(id, factoryId);
        return resp.getData();
    }

    /**
     * Returns a Video&#39;s metadata
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @return ApiResponse&lt;VideoMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VideoMetadata> videoMetadataWithHttpInfo(String id, String factoryId) throws ApiException {
        com.squareup.okhttp.Call call = videoMetadataValidateBeforeCall(id, factoryId, null, null);
        Type localVarReturnType = new TypeToken<VideoMetadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a Video&#39;s metadata (asynchronously)
     * 
     * @param id Id of a Video. (required)
     * @param factoryId Id of a Factory. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videoMetadataAsync(String id, String factoryId, final ApiCallback<VideoMetadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videoMetadataValidateBeforeCall(id, factoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VideoMetadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for videos
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call videosCall(String factoryId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/videos.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call videosValidateBeforeCall(String factoryId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling videos(Async)");
        }
        

        com.squareup.okhttp.Call call = videosCall(factoryId, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a collection of Video objects.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @return PaginatedVideoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedVideoCollection videos(String factoryId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<PaginatedVideoCollection> resp = videosWithHttpInfo(factoryId, page, perPage);
        return resp.getData();
    }

    /**
     * Returns a collection of Video objects.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @return ApiResponse&lt;PaginatedVideoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedVideoCollection> videosWithHttpInfo(String factoryId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = videosValidateBeforeCall(factoryId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<PaginatedVideoCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a collection of Video objects. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call videosAsync(String factoryId, Integer page, Integer perPage, final ApiCallback<PaginatedVideoCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = videosValidateBeforeCall(factoryId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedVideoCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for workflows
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call workflowsCall(String factoryId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (factoryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("factory_id", factoryId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call workflowsValidateBeforeCall(String factoryId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'factoryId' is set
        if (factoryId == null) {
            throw new ApiException("Missing the required parameter 'factoryId' when calling workflows(Async)");
        }
        

        com.squareup.okhttp.Call call = workflowsCall(factoryId, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Returns a collection of Workflows that belong to a Factory.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @return PaginatedWorkflowsCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaginatedWorkflowsCollection workflows(String factoryId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<PaginatedWorkflowsCollection> resp = workflowsWithHttpInfo(factoryId, page, perPage);
        return resp.getData();
    }

    /**
     * Returns a collection of Workflows that belong to a Factory.
     * 
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @return ApiResponse&lt;PaginatedWorkflowsCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaginatedWorkflowsCollection> workflowsWithHttpInfo(String factoryId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = workflowsValidateBeforeCall(factoryId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<PaginatedWorkflowsCollection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a collection of Workflows that belong to a Factory. (asynchronously)
     * 
     * @param factoryId Id of a Factory. (required)
     * @param page A page to be fetched. Default is &#x60;1&#x60;. (optional)
     * @param perPage A number of results per page. Default is &#x60;100&#x60;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call workflowsAsync(String factoryId, Integer page, Integer perPage, final ApiCallback<PaginatedWorkflowsCollection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = workflowsValidateBeforeCall(factoryId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaginatedWorkflowsCollection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
