/*
 * Flip API
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.telestream.cloud.flip;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import net.telestream.cloud.flip.Video;

/**
 * PaginatedVideoCollection
 */

public class PaginatedVideoCollection {
  @SerializedName("videos")
  private List<Video> videos = null;

  @SerializedName("page")
  private Integer page = null;

  @SerializedName("per_page")
  private Integer perPage = null;

  @SerializedName("total")
  private Integer total = null;

  public PaginatedVideoCollection videos(List<Video> videos) {
    this.videos = videos;
    return this;
  }

  public PaginatedVideoCollection addVideosItem(Video videosItem) {
    if (this.videos == null) {
      this.videos = new ArrayList<Video>();
    }
    this.videos.add(videosItem);
    return this;
  }

   /**
   * Get videos
   * @return videos
  **/
  @ApiModelProperty(value = "")
  public List<Video> getVideos() {
    return videos;
  }

  public void setVideos(List<Video> videos) {
    this.videos = videos;
  }

  public PaginatedVideoCollection page(Integer page) {
    this.page = page;
    return this;
  }

   /**
   * A number of the fetched page.
   * @return page
  **/
  @ApiModelProperty(value = "A number of the fetched page.")
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }

  public PaginatedVideoCollection perPage(Integer perPage) {
    this.perPage = perPage;
    return this;
  }

   /**
   * A number of videos per page.
   * @return perPage
  **/
  @ApiModelProperty(value = "A number of videos per page.")
  public Integer getPerPage() {
    return perPage;
  }

  public void setPerPage(Integer perPage) {
    this.perPage = perPage;
  }

  public PaginatedVideoCollection total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * A number of all videos stored in the db.
   * @return total
  **/
  @ApiModelProperty(value = "A number of all videos stored in the db.")
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaginatedVideoCollection paginatedVideoCollection = (PaginatedVideoCollection) o;
    return Objects.equals(this.videos, paginatedVideoCollection.videos) &&
        Objects.equals(this.page, paginatedVideoCollection.page) &&
        Objects.equals(this.perPage, paginatedVideoCollection.perPage) &&
        Objects.equals(this.total, paginatedVideoCollection.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(videos, page, perPage, total);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaginatedVideoCollection {\n");
    
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

