/*
 * Flip API
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.telestream.cloud.flip;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.telestream.cloud.flip.ExtraFile;

/**
 * VideoUploadBody
 */

public class VideoUploadBody {
  @SerializedName("file_size")
  private Long fileSize = null;

  @SerializedName("file_name")
  private String fileName = null;

  @SerializedName("extra_files")
  private List<ExtraFile> extraFiles = null;

  @SerializedName("profiles")
  private String profiles = null;

  @SerializedName("path_format")
  private String pathFormat = null;

  @SerializedName("payload")
  private String payload = null;

  @SerializedName("extra_variables")
  private Map<String, String> extraVariables = null;

  @SerializedName("watermark_url")
  private String watermarkUrl = null;

  @SerializedName("watermark_left")
  private String watermarkLeft = null;

  @SerializedName("watermark_top")
  private String watermarkTop = null;

  @SerializedName("watermark_right")
  private String watermarkRight = null;

  @SerializedName("watermark_bottom")
  private String watermarkBottom = null;

  @SerializedName("watermark_width")
  private String watermarkWidth = null;

  @SerializedName("watermark_height")
  private String watermarkHeight = null;

  @SerializedName("clip_length")
  private String clipLength = null;

  @SerializedName("clip_offset")
  private String clipOffset = null;

  @SerializedName("multi_chunk")
  private Boolean multiChunk = true;

  public VideoUploadBody fileSize(Long fileSize) {
    this.fileSize = fileSize;
    return this;
  }

   /**
   * Size of the file that will be uploaded in &#x60;bytes&#x60;.
   * @return fileSize
  **/
  @ApiModelProperty(required = true, value = "Size of the file that will be uploaded in `bytes`.")
  public Long getFileSize() {
    return fileSize;
  }

  public void setFileSize(Long fileSize) {
    this.fileSize = fileSize;
  }

  public VideoUploadBody fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Name of the file that will be uploaded.
   * @return fileName
  **/
  @ApiModelProperty(required = true, value = "Name of the file that will be uploaded.")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public VideoUploadBody extraFiles(List<ExtraFile> extraFiles) {
    this.extraFiles = extraFiles;
    return this;
  }

  public VideoUploadBody addExtraFilesItem(ExtraFile extraFilesItem) {
    if (this.extraFiles == null) {
      this.extraFiles = new ArrayList<ExtraFile>();
    }
    this.extraFiles.add(extraFilesItem);
    return this;
  }

   /**
   * A list of names of additional files that will be uploaded.
   * @return extraFiles
  **/
  @ApiModelProperty(value = "A list of names of additional files that will be uploaded.")
  public List<ExtraFile> getExtraFiles() {
    return extraFiles;
  }

  public void setExtraFiles(List<ExtraFile> extraFiles) {
    this.extraFiles = extraFiles;
  }

  public VideoUploadBody profiles(String profiles) {
    this.profiles = profiles;
    return this;
  }

   /**
   * A comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings will created right away.
   * @return profiles
  **/
  @ApiModelProperty(value = "A comma-separated list of profile names or IDs to be used during encoding. Alternatively, specify none so no encodings will created right away.")
  public String getProfiles() {
    return profiles;
  }

  public void setProfiles(String profiles) {
    this.profiles = profiles;
  }

  public VideoUploadBody pathFormat(String pathFormat) {
    this.pathFormat = pathFormat;
    return this;
  }

   /**
   * Get pathFormat
   * @return pathFormat
  **/
  @ApiModelProperty(value = "")
  public String getPathFormat() {
    return pathFormat;
  }

  public void setPathFormat(String pathFormat) {
    this.pathFormat = pathFormat;
  }

  public VideoUploadBody payload(String payload) {
    this.payload = payload;
    return this;
  }

   /**
   * Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID.
   * @return payload
  **/
  @ApiModelProperty(value = "Payload is an arbitrary text of length 256 or shorter that you can store along the Video. It is typically used to retain an association with one of your own DB record ID.")
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }

  public VideoUploadBody extraVariables(Map<String, String> extraVariables) {
    this.extraVariables = extraVariables;
    return this;
  }

  public VideoUploadBody putExtraVariablesItem(String key, String extraVariablesItem) {
    if (this.extraVariables == null) {
      this.extraVariables = new HashMap<String, String>();
    }
    this.extraVariables.put(key, extraVariablesItem);
    return this;
  }

   /**
   * Get extraVariables
   * @return extraVariables
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getExtraVariables() {
    return extraVariables;
  }

  public void setExtraVariables(Map<String, String> extraVariables) {
    this.extraVariables = extraVariables;
  }

  public VideoUploadBody watermarkUrl(String watermarkUrl) {
    this.watermarkUrl = watermarkUrl;
    return this;
  }

   /**
   * URL pointing to an image that will be used asa watermark.
   * @return watermarkUrl
  **/
  @ApiModelProperty(value = "URL pointing to an image that will be used asa watermark.")
  public String getWatermarkUrl() {
    return watermarkUrl;
  }

  public void setWatermarkUrl(String watermarkUrl) {
    this.watermarkUrl = watermarkUrl;
  }

  public VideoUploadBody watermarkLeft(String watermarkLeft) {
    this.watermarkLeft = watermarkLeft;
    return this;
  }

   /**
   * Determines distance between the left edge of a video and the left edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_right is not.
   * @return watermarkLeft
  **/
  @ApiModelProperty(example = "100px", value = "Determines distance between the left edge of a video and the left edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_right is not.")
  public String getWatermarkLeft() {
    return watermarkLeft;
  }

  public void setWatermarkLeft(String watermarkLeft) {
    this.watermarkLeft = watermarkLeft;
  }

  public VideoUploadBody watermarkTop(String watermarkTop) {
    this.watermarkTop = watermarkTop;
    return this;
  }

   /**
   * Determines distance between the top edge of a video and the top edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_bottom is not.
   * @return watermarkTop
  **/
  @ApiModelProperty(example = "100%", value = "Determines distance between the top edge of a video and the top edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_bottom is not.")
  public String getWatermarkTop() {
    return watermarkTop;
  }

  public void setWatermarkTop(String watermarkTop) {
    this.watermarkTop = watermarkTop;
  }

  public VideoUploadBody watermarkRight(String watermarkRight) {
    this.watermarkRight = watermarkRight;
    return this;
  }

   /**
   * Determines distance between the right edge of a video and the right edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_left is not.
   * @return watermarkRight
  **/
  @ApiModelProperty(value = "Determines distance between the right edge of a video and the right edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_left is not.")
  public String getWatermarkRight() {
    return watermarkRight;
  }

  public void setWatermarkRight(String watermarkRight) {
    this.watermarkRight = watermarkRight;
  }

  public VideoUploadBody watermarkBottom(String watermarkBottom) {
    this.watermarkBottom = watermarkBottom;
    return this;
  }

   /**
   * Determines distance between the bottom edge of a video and the bottom edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_top is not.
   * @return watermarkBottom
  **/
  @ApiModelProperty(value = "Determines distance between the bottom edge of a video and the bottom edge of a watermark image. Can be specified in pixels or percents. This parameter can be set only if watermark_top is not.")
  public String getWatermarkBottom() {
    return watermarkBottom;
  }

  public void setWatermarkBottom(String watermarkBottom) {
    this.watermarkBottom = watermarkBottom;
  }

  public VideoUploadBody watermarkWidth(String watermarkWidth) {
    this.watermarkWidth = watermarkWidth;
    return this;
  }

   /**
   * Determines width of the watermark image. Should be specified in pixels.
   * @return watermarkWidth
  **/
  @ApiModelProperty(value = "Determines width of the watermark image. Should be specified in pixels.")
  public String getWatermarkWidth() {
    return watermarkWidth;
  }

  public void setWatermarkWidth(String watermarkWidth) {
    this.watermarkWidth = watermarkWidth;
  }

  public VideoUploadBody watermarkHeight(String watermarkHeight) {
    this.watermarkHeight = watermarkHeight;
    return this;
  }

   /**
   * Determines width of the watermark image. Should be specified in pixels.
   * @return watermarkHeight
  **/
  @ApiModelProperty(value = "Determines width of the watermark image. Should be specified in pixels.")
  public String getWatermarkHeight() {
    return watermarkHeight;
  }

  public void setWatermarkHeight(String watermarkHeight) {
    this.watermarkHeight = watermarkHeight;
  }

  public VideoUploadBody clipLength(String clipLength) {
    this.clipLength = clipLength;
    return this;
  }

   /**
   * Length of the uploaded video. Should be formatted as follows: HH:MM:SS
   * @return clipLength
  **/
  @ApiModelProperty(value = "Length of the uploaded video. Should be formatted as follows: HH:MM:SS")
  public String getClipLength() {
    return clipLength;
  }

  public void setClipLength(String clipLength) {
    this.clipLength = clipLength;
  }

  public VideoUploadBody clipOffset(String clipOffset) {
    this.clipOffset = clipOffset;
    return this;
  }

   /**
   * Clip starts at a specific offset.
   * @return clipOffset
  **/
  @ApiModelProperty(example = "00:00:10", value = "Clip starts at a specific offset.")
  public String getClipOffset() {
    return clipOffset;
  }

  public void setClipOffset(String clipOffset) {
    this.clipOffset = clipOffset;
  }

  public VideoUploadBody multiChunk(Boolean multiChunk) {
    this.multiChunk = multiChunk;
    return this;
  }

   /**
   * Get multiChunk
   * @return multiChunk
  **/
  @ApiModelProperty(value = "")
  public Boolean isMultiChunk() {
    return multiChunk;
  }

  public void setMultiChunk(Boolean multiChunk) {
    this.multiChunk = multiChunk;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoUploadBody videoUploadBody = (VideoUploadBody) o;
    return Objects.equals(this.fileSize, videoUploadBody.fileSize) &&
        Objects.equals(this.fileName, videoUploadBody.fileName) &&
        Objects.equals(this.extraFiles, videoUploadBody.extraFiles) &&
        Objects.equals(this.profiles, videoUploadBody.profiles) &&
        Objects.equals(this.pathFormat, videoUploadBody.pathFormat) &&
        Objects.equals(this.payload, videoUploadBody.payload) &&
        Objects.equals(this.extraVariables, videoUploadBody.extraVariables) &&
        Objects.equals(this.watermarkUrl, videoUploadBody.watermarkUrl) &&
        Objects.equals(this.watermarkLeft, videoUploadBody.watermarkLeft) &&
        Objects.equals(this.watermarkTop, videoUploadBody.watermarkTop) &&
        Objects.equals(this.watermarkRight, videoUploadBody.watermarkRight) &&
        Objects.equals(this.watermarkBottom, videoUploadBody.watermarkBottom) &&
        Objects.equals(this.watermarkWidth, videoUploadBody.watermarkWidth) &&
        Objects.equals(this.watermarkHeight, videoUploadBody.watermarkHeight) &&
        Objects.equals(this.clipLength, videoUploadBody.clipLength) &&
        Objects.equals(this.clipOffset, videoUploadBody.clipOffset) &&
        Objects.equals(this.multiChunk, videoUploadBody.multiChunk);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileSize, fileName, extraFiles, profiles, pathFormat, payload, extraVariables, watermarkUrl, watermarkLeft, watermarkTop, watermarkRight, watermarkBottom, watermarkWidth, watermarkHeight, clipLength, clipOffset, multiChunk);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoUploadBody {\n");
    
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    extraFiles: ").append(toIndentedString(extraFiles)).append("\n");
    sb.append("    profiles: ").append(toIndentedString(profiles)).append("\n");
    sb.append("    pathFormat: ").append(toIndentedString(pathFormat)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    extraVariables: ").append(toIndentedString(extraVariables)).append("\n");
    sb.append("    watermarkUrl: ").append(toIndentedString(watermarkUrl)).append("\n");
    sb.append("    watermarkLeft: ").append(toIndentedString(watermarkLeft)).append("\n");
    sb.append("    watermarkTop: ").append(toIndentedString(watermarkTop)).append("\n");
    sb.append("    watermarkRight: ").append(toIndentedString(watermarkRight)).append("\n");
    sb.append("    watermarkBottom: ").append(toIndentedString(watermarkBottom)).append("\n");
    sb.append("    watermarkWidth: ").append(toIndentedString(watermarkWidth)).append("\n");
    sb.append("    watermarkHeight: ").append(toIndentedString(watermarkHeight)).append("\n");
    sb.append("    clipLength: ").append(toIndentedString(clipLength)).append("\n");
    sb.append("    clipOffset: ").append(toIndentedString(clipOffset)).append("\n");
    sb.append("    multiChunk: ").append(toIndentedString(multiChunk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

