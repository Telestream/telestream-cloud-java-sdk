/*
 * Flip API
 * Description
 *
 * OpenAPI spec version: 2.0.0
 * Contact: cloudsupport@telestream.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.telestream.cloud.flip;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Profile
 */

public class Profile {
  /**
   * todo
   */
  @JsonAdapter(AdvancedFpsConversionEnum.Adapter.class)
  public enum AdvancedFpsConversionEnum {
    TELESTREAM("telestream"),
    
    TACHYON("tachyon");

    private String value;

    AdvancedFpsConversionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdvancedFpsConversionEnum fromValue(String text) {
      for (AdvancedFpsConversionEnum b : AdvancedFpsConversionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AdvancedFpsConversionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdvancedFpsConversionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdvancedFpsConversionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AdvancedFpsConversionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("advanced_fps_conversion")
  private AdvancedFpsConversionEnum advancedFpsConversion = null;

  /**
   * Specifies an aspect mode for output videos. The following options are available:   - letterbox:   - pad: Add paddings to the input image. Default is \&quot;letterbox\&quot;.
   */
  @JsonAdapter(AspectModeEnum.Adapter.class)
  public enum AspectModeEnum {
    PRESERVE("preserve"),
    
    CONSTRAIN("constrain"),
    
    LETTERBOX("letterbox"),
    
    PAD("pad"),
    
    FILL_CROP_("fill (crop)"),
    
    STRETCH("stretch"),
    
    CENTER("center");

    private String value;

    AspectModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AspectModeEnum fromValue(String text) {
      for (AspectModeEnum b : AspectModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AspectModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AspectModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AspectModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AspectModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("aspect_mode")
  private AspectModeEnum aspectMode = null;

  @SerializedName("aspect_ratio")
  private String aspectRatio = null;

  @SerializedName("audio_bitrate")
  private Integer audioBitrate = null;

  @SerializedName("audio_channels")
  private Integer audioChannels = null;

  /**
   * A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.
   */
  @JsonAdapter(AudioChannelsLayoutEnum.Adapter.class)
  public enum AudioChannelsLayoutEnum {
    _1_0("1.0"),
    
    _2_0("2.0"),
    
    _2_1("2.1"),
    
    _3_0("3.0"),
    
    _3_0_BACK_("3.0(back)"),
    
    _3_1("3.1"),
    
    _4_0("4.0"),
    
    _4_1("4.1"),
    
    QUAD("quad"),
    
    _5_0("5.0"),
    
    _5_0_SIDE_("5.0(side)"),
    
    _5_1_SIDE_("5.1(side)"),
    
    _6_0("6.0"),
    
    _6_1("6.1"),
    
    _7_0("7.0"),
    
    _7_1("7.1"),
    
    MONO("mono"),
    
    STEREO("stereo");

    private String value;

    AudioChannelsLayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioChannelsLayoutEnum fromValue(String text) {
      for (AudioChannelsLayoutEnum b : AudioChannelsLayoutEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AudioChannelsLayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioChannelsLayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioChannelsLayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AudioChannelsLayoutEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("audio_channels_layout")
  private AudioChannelsLayoutEnum audioChannelsLayout = null;

  @SerializedName("audio_channels_per_track")
  private Integer audioChannelsPerTrack = null;

  @SerializedName("audio_codec")
  private String audioCodec = null;

  /**
   * Specifies an audio container.
   */
  @JsonAdapter(AudioFormatEnum.Adapter.class)
  public enum AudioFormatEnum {
    S24LE("pcm_s24le"),
    
    S16LE("pcm_s16le");

    private String value;

    AudioFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioFormatEnum fromValue(String text) {
      for (AudioFormatEnum b : AudioFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AudioFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AudioFormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("audio_format")
  private AudioFormatEnum audioFormat = null;

  @SerializedName("audio_map")
  private String audioMap = null;

  @SerializedName("audio_pid")
  private String audioPid = null;

  @SerializedName("audio_profile")
  private String audioProfile = null;

  @SerializedName("audio_sample_rate")
  private String audioSampleRate = null;

  @SerializedName("audio_stream_id")
  private Integer audioStreamId = null;

  @SerializedName("audio_streams")
  private Integer audioStreams = null;

  /**
   * A class of the AVC-Intra video coding.
   */
  @JsonAdapter(AvcintraClassEnum.Adapter.class)
  public enum AvcintraClassEnum {
    _50("50"),
    
    _100("100");

    private String value;

    AvcintraClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvcintraClassEnum fromValue(String text) {
      for (AvcintraClassEnum b : AvcintraClassEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AvcintraClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvcintraClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvcintraClassEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AvcintraClassEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("avcintra_class")
  private AvcintraClassEnum avcintraClass = null;

  @SerializedName("buffer_size")
  private String bufferSize = null;

  @SerializedName("buffer_size_in_packets")
  private String bufferSizeInPackets = null;

  @SerializedName("bumpers")
  private String bumpers = null;

  @SerializedName("byte_range_requests")
  private Boolean byteRangeRequests = null;

  @SerializedName("clip_length")
  private String clipLength = null;

  @SerializedName("clip_offset")
  private String clipOffset = null;

  /**
   * One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.
   */
  @JsonAdapter(ClosedCaptionsEnum.Adapter.class)
  public enum ClosedCaptionsEnum {
    ADD("add"),
    
    BURN("burn");

    private String value;

    ClosedCaptionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClosedCaptionsEnum fromValue(String text) {
      for (ClosedCaptionsEnum b : ClosedCaptionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ClosedCaptionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClosedCaptionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClosedCaptionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ClosedCaptionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("closed_captions")
  private ClosedCaptionsEnum closedCaptions = null;

  @SerializedName("color_metadata")
  private Boolean colorMetadata = null;

  @SerializedName("created_at")
  private String createdAt = null;

  @SerializedName("crop_input_bottom")
  private String cropInputBottom = null;

  @SerializedName("crop_input_height")
  private String cropInputHeight = null;

  @SerializedName("crop_input_left")
  private String cropInputLeft = null;

  @SerializedName("crop_input_right")
  private String cropInputRight = null;

  @SerializedName("crop_input_top")
  private String cropInputTop = null;

  @SerializedName("crop_input_width")
  private String cropInputWidth = null;

  @SerializedName("dash_profile")
  private String dashProfile = null;

  /**
   * One of &#x60;keep_fps&#x60; or &#x60;double_fps&#x60;. By default it is not set.
   */
  @JsonAdapter(DeinterlaceEnum.Adapter.class)
  public enum DeinterlaceEnum {
    KEEP_FPS("keep_fps"),
    
    DOUBLE_FPS("double_fps");

    private String value;

    DeinterlaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeinterlaceEnum fromValue(String text) {
      for (DeinterlaceEnum b : DeinterlaceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DeinterlaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeinterlaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeinterlaceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeinterlaceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("deinterlace")
  private DeinterlaceEnum deinterlace = null;

  @SerializedName("deinterlace_frames")
  private String deinterlaceFrames = null;

  @SerializedName("description")
  private String description = null;

  /**
   * Gets or Sets dnxhdType
   */
  @JsonAdapter(DnxhdTypeEnum.Adapter.class)
  public enum DnxhdTypeEnum {
    _36("36"),
    
    _45("45"),
    
    _60("60"),
    
    _75("75"),
    
    _90("90"),
    
    _90X("90x"),
    
    _110("110"),
    
    _115("115"),
    
    _120("120"),
    
    _145("145"),
    
    _175X("175x"),
    
    _175("175"),
    
    _185X("185x"),
    
    _185("185"),
    
    _220X("220x"),
    
    _220("220");

    private String value;

    DnxhdTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DnxhdTypeEnum fromValue(String text) {
      for (DnxhdTypeEnum b : DnxhdTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DnxhdTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DnxhdTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DnxhdTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DnxhdTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("dnxhd_type")
  private DnxhdTypeEnum dnxhdType = null;

  @SerializedName("encryption")
  private Boolean encryption = null;

  @SerializedName("extname")
  private String extname = null;

  @SerializedName("fps")
  private String fps = null;

  @SerializedName("frame_count")
  private String frameCount = null;

  @SerializedName("frame_interval")
  private String frameInterval = null;

  @SerializedName("frame_offsets")
  private String frameOffsets = null;

  /**
   * A specified set of constraints that indicate a degree of required decoder performance for a profile.
   */
  @JsonAdapter(H264LevelEnum.Adapter.class)
  public enum H264LevelEnum {
    _1_0("1.0"),
    
    _1B("1b"),
    
    _1_1("1.1"),
    
    _1_2("1.2"),
    
    _1_3("1.3"),
    
    _2_0("2.0"),
    
    _2_1("2.1"),
    
    _2_2("2.2"),
    
    _3_0("3.0"),
    
    _3_1("3.1"),
    
    _3_2("3.2"),
    
    _4_0("4.0"),
    
    _4_1("4.1"),
    
    _4_2("4.2"),
    
    _5_0("5.0"),
    
    _5_1("5.1");

    private String value;

    H264LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static H264LevelEnum fromValue(String text) {
      for (H264LevelEnum b : H264LevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<H264LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final H264LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public H264LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return H264LevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("h264_level")
  private H264LevelEnum h264Level = null;

  /**
   * Profiles represent a sub-set of the encoding techniques available in H.264.
   */
  @JsonAdapter(H264ProfileEnum.Adapter.class)
  public enum H264ProfileEnum {
    BASELINE("baseline"),
    
    MAIN("main"),
    
    HIGH("high"),
    
    HIGH10("high10"),
    
    HIGH422("high422"),
    
    HIGH444("high444");

    private String value;

    H264ProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static H264ProfileEnum fromValue(String text) {
      for (H264ProfileEnum b : H264ProfileEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<H264ProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final H264ProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public H264ProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return H264ProfileEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("h264_profile")
  private H264ProfileEnum h264Profile = null;

  /**
   * Specifies a h264 tuning option.
   */
  @JsonAdapter(H264TuneEnum.Adapter.class)
  public enum H264TuneEnum {
    FILM("film"),
    
    ANIMATION("animation"),
    
    GRAIN("grain"),
    
    PSNR("psnr"),
    
    SSIM("ssim"),
    
    FASTDECODE("fastdecode"),
    
    ZEROLATENCY("zerolatency");

    private String value;

    H264TuneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static H264TuneEnum fromValue(String text) {
      for (H264TuneEnum b : H264TuneEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<H264TuneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final H264TuneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public H264TuneEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return H264TuneEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("h264_tune")
  private H264TuneEnum h264Tune = null;

  @SerializedName("height")
  private String height = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("imx_type")
  private String imxType = null;

  @SerializedName("inputs")
  private String inputs = null;

  @SerializedName("interlace")
  private String interlace = null;

  @SerializedName("keyframe_interval")
  private String keyframeInterval = null;

  @SerializedName("keyframe_rate")
  private String keyframeRate = null;

  @SerializedName("lang")
  private String lang = null;

  @SerializedName("max_rate")
  private String maxRate = null;

  @SerializedName("merge_audio_streams")
  private String mergeAudioStreams = null;

  @SerializedName("mute_audio_tracks")
  private Boolean muteAudioTracks = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("outputs")
  private String outputs = null;

  @SerializedName("outputs_path_format")
  private String outputsPathFormat = null;

  /**
   * Gets or Sets playlistType
   */
  @JsonAdapter(PlaylistTypeEnum.Adapter.class)
  public enum PlaylistTypeEnum {
    IFRAME("iframe"),
    
    IFRAME_ONLY("iframe-only");

    private String value;

    PlaylistTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlaylistTypeEnum fromValue(String text) {
      for (PlaylistTypeEnum b : PlaylistTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PlaylistTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlaylistTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlaylistTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PlaylistTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("playlist_type")
  private PlaylistTypeEnum playlistType = null;

  @SerializedName("pmt_pid")
  private String pmtPid = null;

  /**
   * a name of a preset that a profile will use.
   */
  @JsonAdapter(PresetNameEnum.Adapter.class)
  public enum PresetNameEnum {
    AAC("aac"),
    
    AVC_INTRA("avc.intra"),
    
    DASH_VARIANT("dash.variant"),
    
    DASH_VARIANT_AUDIO("dash.variant.audio"),
    
    DASH_VARIANT_WEBVTT("dash.variant.webvtt"),
    
    DASH_VARIANT_TTML("dash.variant.ttml"),
    
    DASH_VARIANT_PLAYLIST("dash.variant.playlist"),
    
    DASH_VARIANT_NVENC("dash.variant.nvenc"),
    
    DASH_MUXER("dash.muxer"),
    
    DASH_MUXER_AUDIO("dash.muxer.audio"),
    
    DNXHD("dnxhd"),
    
    H264("h264"),
    
    H264_BASELINE("h264.baseline"),
    
    H264_NVENC_TELESTREAM_MOV("h264.nvenc.telestream.mov"),
    
    H264_NVENC("h264.nvenc"),
    
    H265("h265"),
    
    H265_4K("h265.4K"),
    
    HLS_MUXER("hls.muxer"),
    
    HLS_MUXER_AUDIO("hls.muxer.audio"),
    
    HLS_VARIANT("hls.variant"),
    
    HLS_VARIANT_AUDIO("hls.variant.audio"),
    
    HLS_VARIANT_PLAYLIST("hls.variant.playlist"),
    
    HLS_VARIANT_NVENC("hls.variant.nvenc"),
    
    HLS_VARIANT_WEBVTT("hls.variant.webvtt"),
    
    HSS("hss"),
    
    HSS_VARIANT("hss.variant"),
    
    HSS_VARIANT_AUDIO("hss.variant.audio"),
    
    HSS_VARIANT_PLAYLIST("hss.variant.playlist"),
    
    IMX("imx"),
    
    JPEG("jpeg"),
    
    M4A("m4a"),
    
    MP3("mp3"),
    
    MPEG2("mpeg2"),
    
    MPEGPS("mpegps"),
    
    MPEGTS_H264("mpegts.h264"),
    
    PNG("png"),
    
    PRORES422("prores422"),
    
    QUICK_ONE_THUMBNAIL("quick_one_thumbnail"),
    
    THUMBNAIL("thumbnail"),
    
    WEBM_VP8("webm.vp8"),
    
    WEBM_VP9("webm.vp9"),
    
    XDCAM("xdcam");

    private String value;

    PresetNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PresetNameEnum fromValue(String text) {
      for (PresetNameEnum b : PresetNameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PresetNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PresetNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PresetNameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PresetNameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("preset_name")
  private PresetNameEnum presetName = null;

  @SerializedName("prores_format")
  private String proresFormat = null;

  @SerializedName("segment_time")
  private Integer segmentTime = null;

  @SerializedName("stack")
  private String stack = null;

  /**
   * Gets or Sets telestreamBlockSize
   */
  @JsonAdapter(TelestreamBlockSizeEnum.Adapter.class)
  public enum TelestreamBlockSizeEnum {
    _16X16("16x16"),
    
    _24X24("24x24"),
    
    _32X32("32x32");

    private String value;

    TelestreamBlockSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TelestreamBlockSizeEnum fromValue(String text) {
      for (TelestreamBlockSizeEnum b : TelestreamBlockSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TelestreamBlockSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TelestreamBlockSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TelestreamBlockSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TelestreamBlockSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("telestream_block_size")
  private TelestreamBlockSizeEnum telestreamBlockSize = null;

  @SerializedName("telestream_blur_scaler")
  private BigDecimal telestreamBlurScaler = null;

  @SerializedName("telestream_cost_scaler")
  private BigDecimal telestreamCostScaler = null;

  @SerializedName("telestream_search_length_scaler")
  private Integer telestreamSearchLengthScaler = null;

  @SerializedName("telestream_subpel_mode")
  private Boolean telestreamSubpelMode = null;

  @SerializedName("time_code")
  private String timeCode = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("trailers")
  private String trailers = null;

  @SerializedName("transport_rate")
  private String transportRate = null;

  @SerializedName("ts_pids")
  private String tsPids = null;

  @SerializedName("updated_at")
  private String updatedAt = null;

  @SerializedName("upscale")
  private Boolean upscale = null;

  @SerializedName("use_editlist")
  private Boolean useEditlist = null;

  @SerializedName("variants")
  private String variants = null;

  @SerializedName("video_bitrate")
  private String videoBitrate = null;

  @SerializedName("video_pid")
  private String videoPid = null;

  @SerializedName("watermark_bottom")
  private String watermarkBottom = null;

  @SerializedName("watermark_bumpers")
  private Boolean watermarkBumpers = null;

  @SerializedName("watermark_height")
  private String watermarkHeight = null;

  @SerializedName("watermark_left")
  private String watermarkLeft = null;

  @SerializedName("watermark_right")
  private String watermarkRight = null;

  @SerializedName("watermark_top")
  private String watermarkTop = null;

  @SerializedName("watermark_trailers")
  private Boolean watermarkTrailers = null;

  @SerializedName("watermark_url")
  private String watermarkUrl = null;

  @SerializedName("watermark_width")
  private String watermarkWidth = null;

  @SerializedName("width")
  private String width = null;

  @SerializedName("x264_options")
  private String x264Options = null;

  @SerializedName("x265_options")
  private String x265Options = null;

  @SerializedName("xdcam_format")
  private String xdcamFormat = null;

  @SerializedName("tachyon_allow_remove_pulldown")
  private Boolean tachyonAllowRemovePulldown = null;

  @SerializedName("tachyon_enable_post_pulldown_filter")
  private Boolean tachyonEnablePostPulldownFilter = null;

  @SerializedName("tachyon_media_hint_is_cartoon")
  private Boolean tachyonMediaHintIsCartoon = null;

  @SerializedName("tachyon_media_hint_has_chroma_noise")
  private Boolean tachyonMediaHintHasChromaNoise = null;

  @SerializedName("tachyon_more_sensitive_remove_pulldown")
  private Boolean tachyonMoreSensitiveRemovePulldown = null;

  @SerializedName("tachyon_allow_add_standard_pd")
  private Boolean tachyonAllowAddStandardPd = null;

  @SerializedName("tachyon_allow_add_2_2pd")
  private Boolean tachyonAllowAdd22pd = null;

  @SerializedName("tachyon_allow_add_4_4pd")
  private Boolean tachyonAllowAdd44pd = null;

  @SerializedName("tachyon_allow_add_4_6pd")
  private Boolean tachyonAllowAdd46pd = null;

  @SerializedName("tachyon_allow_add_euro_pd")
  private Boolean tachyonAllowAddEuroPd = null;

  @SerializedName("tachyon_allow_add_adaptive_pd")
  private Boolean tachyonAllowAddAdaptivePd = null;

  /**
   * This setting determines how much Tachyon will trust motion vectors in the creation of new images
   */
  @JsonAdapter(TachyonMotionAmountEnum.Adapter.class)
  public enum TachyonMotionAmountEnum {
    XLOW("xlow"),
    
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high"),
    
    XHIGH("xhigh"),
    
    AUTO("auto");

    private String value;

    TachyonMotionAmountEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TachyonMotionAmountEnum fromValue(String text) {
      for (TachyonMotionAmountEnum b : TachyonMotionAmountEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TachyonMotionAmountEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TachyonMotionAmountEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TachyonMotionAmountEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TachyonMotionAmountEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("tachyon_motion_amount")
  private TachyonMotionAmountEnum tachyonMotionAmount = null;

  /**
   * This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.
   */
  @JsonAdapter(TachyonFallbackSizeEnum.Adapter.class)
  public enum TachyonFallbackSizeEnum {
    SMALL("small"),
    
    MEDIUM("medium"),
    
    LARGE("large"),
    
    XLARGE("xlarge"),
    
    AUTO("auto");

    private String value;

    TachyonFallbackSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TachyonFallbackSizeEnum fromValue(String text) {
      for (TachyonFallbackSizeEnum b : TachyonFallbackSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TachyonFallbackSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TachyonFallbackSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TachyonFallbackSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TachyonFallbackSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("tachyon_fallback_size")
  private TachyonFallbackSizeEnum tachyonFallbackSize = null;

  /**
   * This option specifies the size of a motion block.
   */
  @JsonAdapter(TachyonMblockSizeEnum.Adapter.class)
  public enum TachyonMblockSizeEnum {
    MB16("mb16"),
    
    MB32("mb32"),
    
    MB64("mb64"),
    
    MB128("mb128"),
    
    MB256("mb256"),
    
    AUTO("auto");

    private String value;

    TachyonMblockSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TachyonMblockSizeEnum fromValue(String text) {
      for (TachyonMblockSizeEnum b : TachyonMblockSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TachyonMblockSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TachyonMblockSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TachyonMblockSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TachyonMblockSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("tachyon_mblock_size")
  private TachyonMblockSizeEnum tachyonMblockSize = null;

  @SerializedName("tachyon_cut_detection_sensitivity")
  private BigDecimal tachyonCutDetectionSensitivity = null;

  @SerializedName("eac3_evolution_enable")
  private Boolean eac3EvolutionEnable = null;

  /**
   * Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.
   */
  @JsonAdapter(Eac3BitstreamModeEnum.Adapter.class)
  public enum Eac3BitstreamModeEnum {
    M0("m0"),
    
    M1("m1"),
    
    M2("m2"),
    
    M3("m3"),
    
    M4("m4"),
    
    M5("m5"),
    
    M6("m6"),
    
    M7("m7");

    private String value;

    Eac3BitstreamModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3BitstreamModeEnum fromValue(String text) {
      for (Eac3BitstreamModeEnum b : Eac3BitstreamModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3BitstreamModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3BitstreamModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3BitstreamModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3BitstreamModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_bitstream_mode")
  private Eac3BitstreamModeEnum eac3BitstreamMode = null;

  @SerializedName("eac3_ninety_degree_phase_shift")
  private Boolean eac3NinetyDegreePhaseShift = null;

  @SerializedName("eac3_three_decibel_attenuation")
  private Boolean eac3ThreeDecibelAttenuation = null;

  @SerializedName("eac3_enable_lfe_low_pass_filter")
  private Boolean eac3EnableLfeLowPassFilter = null;

  /**
   * Allows audio that has passed through an A/D conversion stage to be marked as such.
   */
  @JsonAdapter(Eac3AnalogToDigitalConverterTypeEnum.Adapter.class)
  public enum Eac3AnalogToDigitalConverterTypeEnum {
    STANDARD("standard"),
    
    HDCD("hdcd");

    private String value;

    Eac3AnalogToDigitalConverterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3AnalogToDigitalConverterTypeEnum fromValue(String text) {
      for (Eac3AnalogToDigitalConverterTypeEnum b : Eac3AnalogToDigitalConverterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3AnalogToDigitalConverterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3AnalogToDigitalConverterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3AnalogToDigitalConverterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3AnalogToDigitalConverterTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_analog_to_digital_converter_type")
  private Eac3AnalogToDigitalConverterTypeEnum eac3AnalogToDigitalConverterType = null;

  /**
   * Gets or Sets eac3StereoDownmixPreference
   */
  @JsonAdapter(Eac3StereoDownmixPreferenceEnum.Adapter.class)
  public enum Eac3StereoDownmixPreferenceEnum {
    M0("m0"),
    
    M1("m1"),
    
    M2("m2"),
    
    M3("m3");

    private String value;

    Eac3StereoDownmixPreferenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3StereoDownmixPreferenceEnum fromValue(String text) {
      for (Eac3StereoDownmixPreferenceEnum b : Eac3StereoDownmixPreferenceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3StereoDownmixPreferenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3StereoDownmixPreferenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3StereoDownmixPreferenceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3StereoDownmixPreferenceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_stereo_downmix_preference")
  private Eac3StereoDownmixPreferenceEnum eac3StereoDownmixPreference = null;

  /**
   * Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
   */
  @JsonAdapter(Eac3LtRtCenterMixLevelEnum.Adapter.class)
  public enum Eac3LtRtCenterMixLevelEnum {
    C0("c0"),
    
    C1("c1"),
    
    C2("c2"),
    
    C3("c3"),
    
    C4("c4"),
    
    C5("c5"),
    
    C6("c6"),
    
    C7("c7");

    private String value;

    Eac3LtRtCenterMixLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3LtRtCenterMixLevelEnum fromValue(String text) {
      for (Eac3LtRtCenterMixLevelEnum b : Eac3LtRtCenterMixLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3LtRtCenterMixLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3LtRtCenterMixLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3LtRtCenterMixLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3LtRtCenterMixLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_lt_rt_center_mix_level")
  private Eac3LtRtCenterMixLevelEnum eac3LtRtCenterMixLevel = null;

  /**
   * Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
   */
  @JsonAdapter(Eac3LtRtSurroundMixLevelEnum.Adapter.class)
  public enum Eac3LtRtSurroundMixLevelEnum {
    C3("c3"),
    
    C4("c4"),
    
    C5("c5"),
    
    C6("c6"),
    
    C7("c7");

    private String value;

    Eac3LtRtSurroundMixLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3LtRtSurroundMixLevelEnum fromValue(String text) {
      for (Eac3LtRtSurroundMixLevelEnum b : Eac3LtRtSurroundMixLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3LtRtSurroundMixLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3LtRtSurroundMixLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3LtRtSurroundMixLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3LtRtSurroundMixLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_lt_rt_surround_mix_level")
  private Eac3LtRtSurroundMixLevelEnum eac3LtRtSurroundMixLevel = null;

  /**
   * Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
   */
  @JsonAdapter(Eac3LoRoCenterMixLevelEnum.Adapter.class)
  public enum Eac3LoRoCenterMixLevelEnum {
    C0("c0"),
    
    C1("c1"),
    
    C2("c2"),
    
    C3("c3"),
    
    C4("c4"),
    
    C5("c5"),
    
    C6("c6"),
    
    C7("c7");

    private String value;

    Eac3LoRoCenterMixLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3LoRoCenterMixLevelEnum fromValue(String text) {
      for (Eac3LoRoCenterMixLevelEnum b : Eac3LoRoCenterMixLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3LoRoCenterMixLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3LoRoCenterMixLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3LoRoCenterMixLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3LoRoCenterMixLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_lo_ro_center_mix_level")
  private Eac3LoRoCenterMixLevelEnum eac3LoRoCenterMixLevel = null;

  /**
   * Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
   */
  @JsonAdapter(Eac3LoRoSurroundMixLevelEnum.Adapter.class)
  public enum Eac3LoRoSurroundMixLevelEnum {
    C3("c3"),
    
    C4("c4"),
    
    C5("c5"),
    
    C6("c6"),
    
    C7("c7");

    private String value;

    Eac3LoRoSurroundMixLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3LoRoSurroundMixLevelEnum fromValue(String text) {
      for (Eac3LoRoSurroundMixLevelEnum b : Eac3LoRoSurroundMixLevelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3LoRoSurroundMixLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3LoRoSurroundMixLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3LoRoSurroundMixLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3LoRoSurroundMixLevelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_lo_ro_surround_mix_level")
  private Eac3LoRoSurroundMixLevelEnum eac3LoRoSurroundMixLevel = null;

  /**
   * Indicates whether the audio stream was encoded using Dolby EX.
   */
  @JsonAdapter(Eac3SurroundExModeEnum.Adapter.class)
  public enum Eac3SurroundExModeEnum {
    M0("m0"),
    
    M1("m1"),
    
    M2("m2");

    private String value;

    Eac3SurroundExModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3SurroundExModeEnum fromValue(String text) {
      for (Eac3SurroundExModeEnum b : Eac3SurroundExModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3SurroundExModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3SurroundExModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3SurroundExModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3SurroundExModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_surround_ex_mode")
  private Eac3SurroundExModeEnum eac3SurroundExMode = null;

  /**
   * Dynamic Range Control for Line Mode.
   */
  @JsonAdapter(Eac3DrcLineModeProfileEnum.Adapter.class)
  public enum Eac3DrcLineModeProfileEnum {
    P0("p0"),
    
    P1("p1"),
    
    P2("p2"),
    
    P3("p3"),
    
    P4("p4"),
    
    P5("p5");

    private String value;

    Eac3DrcLineModeProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3DrcLineModeProfileEnum fromValue(String text) {
      for (Eac3DrcLineModeProfileEnum b : Eac3DrcLineModeProfileEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3DrcLineModeProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3DrcLineModeProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3DrcLineModeProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3DrcLineModeProfileEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_drc_line_mode_profile")
  private Eac3DrcLineModeProfileEnum eac3DrcLineModeProfile = null;

  /**
   * Dynamic Range Control for RF Mode.
   */
  @JsonAdapter(Eac3DrcRfModeProfileEnum.Adapter.class)
  public enum Eac3DrcRfModeProfileEnum {
    P0("p0"),
    
    P1("p1"),
    
    P2("p2"),
    
    P3("p3"),
    
    P4("p4"),
    
    P5("p5");

    private String value;

    Eac3DrcRfModeProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3DrcRfModeProfileEnum fromValue(String text) {
      for (Eac3DrcRfModeProfileEnum b : Eac3DrcRfModeProfileEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3DrcRfModeProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3DrcRfModeProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3DrcRfModeProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3DrcRfModeProfileEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_drc_rf_mode_profile")
  private Eac3DrcRfModeProfileEnum eac3DrcRfModeProfile = null;

  @SerializedName("eac3_dialog_normalization")
  private Integer eac3DialogNormalization = null;

  /**
   * Gets or Sets eac3RoomType
   */
  @JsonAdapter(Eac3RoomTypeEnum.Adapter.class)
  public enum Eac3RoomTypeEnum {
    M0("m0"),
    
    M1("m1"),
    
    M2("m2");

    private String value;

    Eac3RoomTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Eac3RoomTypeEnum fromValue(String text) {
      for (Eac3RoomTypeEnum b : Eac3RoomTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Eac3RoomTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Eac3RoomTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Eac3RoomTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Eac3RoomTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("eac3_room_type")
  private Eac3RoomTypeEnum eac3RoomType = null;

  @SerializedName("eac3_mixing_level")
  private Integer eac3MixingLevel = null;

  @SerializedName("eac3_copyright_protected")
  private Boolean eac3CopyrightProtected = null;

  @SerializedName("eac3_original_bitstream")
  private Boolean eac3OriginalBitstream = null;

  public Profile advancedFpsConversion(AdvancedFpsConversionEnum advancedFpsConversion) {
    this.advancedFpsConversion = advancedFpsConversion;
    return this;
  }

   /**
   * todo
   * @return advancedFpsConversion
  **/
  @ApiModelProperty(value = "todo")
  public AdvancedFpsConversionEnum getAdvancedFpsConversion() {
    return advancedFpsConversion;
  }

  public void setAdvancedFpsConversion(AdvancedFpsConversionEnum advancedFpsConversion) {
    this.advancedFpsConversion = advancedFpsConversion;
  }

  public Profile aspectMode(AspectModeEnum aspectMode) {
    this.aspectMode = aspectMode;
    return this;
  }

   /**
   * Specifies an aspect mode for output videos. The following options are available:   - letterbox:   - pad: Add paddings to the input image. Default is \&quot;letterbox\&quot;.
   * @return aspectMode
  **/
  @ApiModelProperty(value = "Specifies an aspect mode for output videos. The following options are available:   - letterbox:   - pad: Add paddings to the input image. Default is \"letterbox\".")
  public AspectModeEnum getAspectMode() {
    return aspectMode;
  }

  public void setAspectMode(AspectModeEnum aspectMode) {
    this.aspectMode = aspectMode;
  }

  public Profile aspectRatio(String aspectRatio) {
    this.aspectRatio = aspectRatio;
    return this;
  }

   /**
   * A display aspect ratio. By default it is not set.
   * @return aspectRatio
  **/
  @ApiModelProperty(example = "16:9", value = "A display aspect ratio. By default it is not set.")
  public String getAspectRatio() {
    return aspectRatio;
  }

  public void setAspectRatio(String aspectRatio) {
    this.aspectRatio = aspectRatio;
  }

  public Profile audioBitrate(Integer audioBitrate) {
    this.audioBitrate = audioBitrate;
    return this;
  }

   /**
   * audio bitrate (in bits/s)
   * @return audioBitrate
  **/
  @ApiModelProperty(example = "128", value = "audio bitrate (in bits/s)")
  public Integer getAudioBitrate() {
    return audioBitrate;
  }

  public void setAudioBitrate(Integer audioBitrate) {
    this.audioBitrate = audioBitrate;
  }

  public Profile audioChannels(Integer audioChannels) {
    this.audioChannels = audioChannels;
    return this;
  }

   /**
   * A number of audio channels. By default it is not set.
   * @return audioChannels
  **/
  @ApiModelProperty(value = "A number of audio channels. By default it is not set.")
  public Integer getAudioChannels() {
    return audioChannels;
  }

  public void setAudioChannels(Integer audioChannels) {
    this.audioChannels = audioChannels;
  }

  public Profile audioChannelsLayout(AudioChannelsLayoutEnum audioChannelsLayout) {
    this.audioChannelsLayout = audioChannelsLayout;
    return this;
  }

   /**
   * A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.
   * @return audioChannelsLayout
  **/
  @ApiModelProperty(value = "A channel layout specifies the spatial disposition of the channels in a multi-channel audio stream.")
  public AudioChannelsLayoutEnum getAudioChannelsLayout() {
    return audioChannelsLayout;
  }

  public void setAudioChannelsLayout(AudioChannelsLayoutEnum audioChannelsLayout) {
    this.audioChannelsLayout = audioChannelsLayout;
  }

  public Profile audioChannelsPerTrack(Integer audioChannelsPerTrack) {
    this.audioChannelsPerTrack = audioChannelsPerTrack;
    return this;
  }

   /**
   * A number of audio channels per track.
   * @return audioChannelsPerTrack
  **/
  @ApiModelProperty(value = "A number of audio channels per track.")
  public Integer getAudioChannelsPerTrack() {
    return audioChannelsPerTrack;
  }

  public void setAudioChannelsPerTrack(Integer audioChannelsPerTrack) {
    this.audioChannelsPerTrack = audioChannelsPerTrack;
  }

  public Profile audioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
    return this;
  }

   /**
   * Audio codec that will be used by the profile. Available codecs are: &#x60;libmp3lame&#x60;, &#x60;libvorbis&#x60;, &#x60;libfdk_aac&#x60;, &#x60;dib_ac3, &#x60;pcm_s16le&#x60;, &#x60;mp2&#x60;, &#x60;ac3&#x60;, &#x60;eac3&#x60;.
   * @return audioCodec
  **/
  @ApiModelProperty(value = "Audio codec that will be used by the profile. Available codecs are: `libmp3lame`, `libvorbis`, `libfdk_aac`, `dib_ac3, `pcm_s16le`, `mp2`, `ac3`, `eac3`.")
  public String getAudioCodec() {
    return audioCodec;
  }

  public void setAudioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
  }

  public Profile audioFormat(AudioFormatEnum audioFormat) {
    this.audioFormat = audioFormat;
    return this;
  }

   /**
   * Specifies an audio container.
   * @return audioFormat
  **/
  @ApiModelProperty(value = "Specifies an audio container.")
  public AudioFormatEnum getAudioFormat() {
    return audioFormat;
  }

  public void setAudioFormat(AudioFormatEnum audioFormat) {
    this.audioFormat = audioFormat;
  }

  public Profile audioMap(String audioMap) {
    this.audioMap = audioMap;
    return this;
  }

   /**
   * Get audioMap
   * @return audioMap
  **/
  @ApiModelProperty(value = "")
  public String getAudioMap() {
    return audioMap;
  }

  public void setAudioMap(String audioMap) {
    this.audioMap = audioMap;
  }

  public Profile audioPid(String audioPid) {
    this.audioPid = audioPid;
    return this;
  }

   /**
   * Packet identifier used by MPEG formats.
   * @return audioPid
  **/
  @ApiModelProperty(value = "Packet identifier used by MPEG formats.")
  public String getAudioPid() {
    return audioPid;
  }

  public void setAudioPid(String audioPid) {
    this.audioPid = audioPid;
  }

  public Profile audioProfile(String audioProfile) {
    this.audioProfile = audioProfile;
    return this;
  }

   /**
   * Specifies an audio profile.
   * @return audioProfile
  **/
  @ApiModelProperty(value = "Specifies an audio profile.")
  public String getAudioProfile() {
    return audioProfile;
  }

  public void setAudioProfile(String audioProfile) {
    this.audioProfile = audioProfile;
  }

  public Profile audioSampleRate(String audioSampleRate) {
    this.audioSampleRate = audioSampleRate;
    return this;
  }

   /**
   * The number of samples of audio carried per second.
   * @return audioSampleRate
  **/
  @ApiModelProperty(example = "44100", value = "The number of samples of audio carried per second.")
  public String getAudioSampleRate() {
    return audioSampleRate;
  }

  public void setAudioSampleRate(String audioSampleRate) {
    this.audioSampleRate = audioSampleRate;
  }

  public Profile audioStreamId(Integer audioStreamId) {
    this.audioStreamId = audioStreamId;
    return this;
  }

   /**
   * Get audioStreamId
   * @return audioStreamId
  **/
  @ApiModelProperty(value = "")
  public Integer getAudioStreamId() {
    return audioStreamId;
  }

  public void setAudioStreamId(Integer audioStreamId) {
    this.audioStreamId = audioStreamId;
  }

  public Profile audioStreams(Integer audioStreams) {
    this.audioStreams = audioStreams;
    return this;
  }

   /**
   * A number of audio streams.
   * @return audioStreams
  **/
  @ApiModelProperty(value = "A number of audio streams.")
  public Integer getAudioStreams() {
    return audioStreams;
  }

  public void setAudioStreams(Integer audioStreams) {
    this.audioStreams = audioStreams;
  }

  public Profile avcintraClass(AvcintraClassEnum avcintraClass) {
    this.avcintraClass = avcintraClass;
    return this;
  }

   /**
   * A class of the AVC-Intra video coding.
   * @return avcintraClass
  **/
  @ApiModelProperty(value = "A class of the AVC-Intra video coding.")
  public AvcintraClassEnum getAvcintraClass() {
    return avcintraClass;
  }

  public void setAvcintraClass(AvcintraClassEnum avcintraClass) {
    this.avcintraClass = avcintraClass;
  }

  public Profile bufferSize(String bufferSize) {
    this.bufferSize = bufferSize;
    return this;
  }

   /**
   * Determines the size of the PulseAudio buffer. by default it is not set.
   * @return bufferSize
  **/
  @ApiModelProperty(value = "Determines the size of the PulseAudio buffer. by default it is not set.")
  public String getBufferSize() {
    return bufferSize;
  }

  public void setBufferSize(String bufferSize) {
    this.bufferSize = bufferSize;
  }

  public Profile bufferSizeInPackets(String bufferSizeInPackets) {
    this.bufferSizeInPackets = bufferSizeInPackets;
    return this;
  }

   /**
   * todo
   * @return bufferSizeInPackets
  **/
  @ApiModelProperty(value = "todo")
  public String getBufferSizeInPackets() {
    return bufferSizeInPackets;
  }

  public void setBufferSizeInPackets(String bufferSizeInPackets) {
    this.bufferSizeInPackets = bufferSizeInPackets;
  }

  public Profile bumpers(String bumpers) {
    this.bumpers = bumpers;
    return this;
  }

   /**
   * Get bumpers
   * @return bumpers
  **/
  @ApiModelProperty(value = "")
  public String getBumpers() {
    return bumpers;
  }

  public void setBumpers(String bumpers) {
    this.bumpers = bumpers;
  }

  public Profile byteRangeRequests(Boolean byteRangeRequests) {
    this.byteRangeRequests = byteRangeRequests;
    return this;
  }

   /**
   * Get byteRangeRequests
   * @return byteRangeRequests
  **/
  @ApiModelProperty(value = "")
  public Boolean isByteRangeRequests() {
    return byteRangeRequests;
  }

  public void setByteRangeRequests(Boolean byteRangeRequests) {
    this.byteRangeRequests = byteRangeRequests;
  }

  public Profile clipLength(String clipLength) {
    this.clipLength = clipLength;
    return this;
  }

   /**
   * A clip’s duration.
   * @return clipLength
  **/
  @ApiModelProperty(example = "00:20:00", value = "A clip’s duration.")
  public String getClipLength() {
    return clipLength;
  }

  public void setClipLength(String clipLength) {
    this.clipLength = clipLength;
  }

  public Profile clipOffset(String clipOffset) {
    this.clipOffset = clipOffset;
    return this;
  }

   /**
   * Clip starts at a specific offset.
   * @return clipOffset
  **/
  @ApiModelProperty(example = "00:00:10", value = "Clip starts at a specific offset.")
  public String getClipOffset() {
    return clipOffset;
  }

  public void setClipOffset(String clipOffset) {
    this.clipOffset = clipOffset;
  }

  public Profile closedCaptions(ClosedCaptionsEnum closedCaptions) {
    this.closedCaptions = closedCaptions;
    return this;
  }

   /**
   * One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.
   * @return closedCaptions
  **/
  @ApiModelProperty(value = "One of add (adds captions as a separate streams) or burn (burns captions on video stream using the first subtitle file). By default it is not set.")
  public ClosedCaptionsEnum getClosedCaptions() {
    return closedCaptions;
  }

  public void setClosedCaptions(ClosedCaptionsEnum closedCaptions) {
    this.closedCaptions = closedCaptions;
  }

  public Profile colorMetadata(Boolean colorMetadata) {
    this.colorMetadata = colorMetadata;
    return this;
  }

   /**
   * Get colorMetadata
   * @return colorMetadata
  **/
  @ApiModelProperty(value = "")
  public Boolean isColorMetadata() {
    return colorMetadata;
  }

  public void setColorMetadata(Boolean colorMetadata) {
    this.colorMetadata = colorMetadata;
  }

  public Profile createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * A date and time when the Profile has been created.
   * @return createdAt
  **/
  @ApiModelProperty(value = "A date and time when the Profile has been created.")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public Profile cropInputBottom(String cropInputBottom) {
    this.cropInputBottom = cropInputBottom;
    return this;
  }

   /**
   * Distance (in pixels) from the bottom edge of the screen from which you want your crop to be done.
   * @return cropInputBottom
  **/
  @ApiModelProperty(value = "Distance (in pixels) from the bottom edge of the screen from which you want your crop to be done.")
  public String getCropInputBottom() {
    return cropInputBottom;
  }

  public void setCropInputBottom(String cropInputBottom) {
    this.cropInputBottom = cropInputBottom;
  }

  public Profile cropInputHeight(String cropInputHeight) {
    this.cropInputHeight = cropInputHeight;
    return this;
  }

   /**
   * Width of the cropped image in pixels.
   * @return cropInputHeight
  **/
  @ApiModelProperty(value = "Width of the cropped image in pixels.")
  public String getCropInputHeight() {
    return cropInputHeight;
  }

  public void setCropInputHeight(String cropInputHeight) {
    this.cropInputHeight = cropInputHeight;
  }

  public Profile cropInputLeft(String cropInputLeft) {
    this.cropInputLeft = cropInputLeft;
    return this;
  }

   /**
   * Distance (in pixels) from the left edge of the screen from which you want your crop to be done.
   * @return cropInputLeft
  **/
  @ApiModelProperty(value = "Distance (in pixels) from the left edge of the screen from which you want your crop to be done.")
  public String getCropInputLeft() {
    return cropInputLeft;
  }

  public void setCropInputLeft(String cropInputLeft) {
    this.cropInputLeft = cropInputLeft;
  }

  public Profile cropInputRight(String cropInputRight) {
    this.cropInputRight = cropInputRight;
    return this;
  }

   /**
   * Distance (in pixels) from the right edge of the screen from which you want your crop to be done.
   * @return cropInputRight
  **/
  @ApiModelProperty(value = "Distance (in pixels) from the right edge of the screen from which you want your crop to be done.")
  public String getCropInputRight() {
    return cropInputRight;
  }

  public void setCropInputRight(String cropInputRight) {
    this.cropInputRight = cropInputRight;
  }

  public Profile cropInputTop(String cropInputTop) {
    this.cropInputTop = cropInputTop;
    return this;
  }

   /**
   * Distance (in pixels) from the top edge of the screen from which you want your crop to be done.
   * @return cropInputTop
  **/
  @ApiModelProperty(value = "Distance (in pixels) from the top edge of the screen from which you want your crop to be done.")
  public String getCropInputTop() {
    return cropInputTop;
  }

  public void setCropInputTop(String cropInputTop) {
    this.cropInputTop = cropInputTop;
  }

  public Profile cropInputWidth(String cropInputWidth) {
    this.cropInputWidth = cropInputWidth;
    return this;
  }

   /**
   * Height of the cropped image in pixels.
   * @return cropInputWidth
  **/
  @ApiModelProperty(value = "Height of the cropped image in pixels.")
  public String getCropInputWidth() {
    return cropInputWidth;
  }

  public void setCropInputWidth(String cropInputWidth) {
    this.cropInputWidth = cropInputWidth;
  }

  public Profile dashProfile(String dashProfile) {
    this.dashProfile = dashProfile;
    return this;
  }

   /**
   * Get dashProfile
   * @return dashProfile
  **/
  @ApiModelProperty(value = "")
  public String getDashProfile() {
    return dashProfile;
  }

  public void setDashProfile(String dashProfile) {
    this.dashProfile = dashProfile;
  }

  public Profile deinterlace(DeinterlaceEnum deinterlace) {
    this.deinterlace = deinterlace;
    return this;
  }

   /**
   * One of &#x60;keep_fps&#x60; or &#x60;double_fps&#x60;. By default it is not set.
   * @return deinterlace
  **/
  @ApiModelProperty(value = "One of `keep_fps` or `double_fps`. By default it is not set.")
  public DeinterlaceEnum getDeinterlace() {
    return deinterlace;
  }

  public void setDeinterlace(DeinterlaceEnum deinterlace) {
    this.deinterlace = deinterlace;
  }

  public Profile deinterlaceFrames(String deinterlaceFrames) {
    this.deinterlaceFrames = deinterlaceFrames;
    return this;
  }

   /**
   * Get deinterlaceFrames
   * @return deinterlaceFrames
  **/
  @ApiModelProperty(value = "")
  public String getDeinterlaceFrames() {
    return deinterlaceFrames;
  }

  public void setDeinterlaceFrames(String deinterlaceFrames) {
    this.deinterlaceFrames = deinterlaceFrames;
  }

  public Profile description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the profile.
   * @return description
  **/
  @ApiModelProperty(value = "Description of the profile.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Profile dnxhdType(DnxhdTypeEnum dnxhdType) {
    this.dnxhdType = dnxhdType;
    return this;
  }

   /**
   * Get dnxhdType
   * @return dnxhdType
  **/
  @ApiModelProperty(value = "")
  public DnxhdTypeEnum getDnxhdType() {
    return dnxhdType;
  }

  public void setDnxhdType(DnxhdTypeEnum dnxhdType) {
    this.dnxhdType = dnxhdType;
  }

  public Profile encryption(Boolean encryption) {
    this.encryption = encryption;
    return this;
  }

   /**
   * Get encryption
   * @return encryption
  **/
  @ApiModelProperty(value = "")
  public Boolean isEncryption() {
    return encryption;
  }

  public void setEncryption(Boolean encryption) {
    this.encryption = encryption;
  }

  public Profile extname(String extname) {
    this.extname = extname;
    return this;
  }

   /**
   * File extension.
   * @return extname
  **/
  @ApiModelProperty(example = ".mp4", value = "File extension.")
  public String getExtname() {
    return extname;
  }

  public void setExtname(String extname) {
    this.extname = extname;
  }

  public Profile fps(String fps) {
    this.fps = fps;
    return this;
  }

   /**
   * Null value copy the original fps. By default it is not set.
   * @return fps
  **/
  @ApiModelProperty(example = "29.97", value = "Null value copy the original fps. By default it is not set.")
  public String getFps() {
    return fps;
  }

  public void setFps(String fps) {
    this.fps = fps;
  }

  public Profile frameCount(String frameCount) {
    this.frameCount = frameCount;
    return this;
  }

   /**
   * Evenly spaced number of generated screenshots. By default it is not set.
   * @return frameCount
  **/
  @ApiModelProperty(value = "Evenly spaced number of generated screenshots. By default it is not set.")
  public String getFrameCount() {
    return frameCount;
  }

  public void setFrameCount(String frameCount) {
    this.frameCount = frameCount;
  }

  public Profile frameInterval(String frameInterval) {
    this.frameInterval = frameInterval;
    return this;
  }

   /**
   * Thumbnail interval (Frames or seconds).
   * @return frameInterval
  **/
  @ApiModelProperty(example = "1000f", value = "Thumbnail interval (Frames or seconds).")
  public String getFrameInterval() {
    return frameInterval;
  }

  public void setFrameInterval(String frameInterval) {
    this.frameInterval = frameInterval;
  }

  public Profile frameOffsets(String frameOffsets) {
    this.frameOffsets = frameOffsets;
    return this;
  }

   /**
   * Array of offsets (Frames or seconds).
   * @return frameOffsets
  **/
  @ApiModelProperty(example = "2s, 10s, 250f, 400f", value = "Array of offsets (Frames or seconds).")
  public String getFrameOffsets() {
    return frameOffsets;
  }

  public void setFrameOffsets(String frameOffsets) {
    this.frameOffsets = frameOffsets;
  }

  public Profile h264Level(H264LevelEnum h264Level) {
    this.h264Level = h264Level;
    return this;
  }

   /**
   * A specified set of constraints that indicate a degree of required decoder performance for a profile.
   * @return h264Level
  **/
  @ApiModelProperty(value = "A specified set of constraints that indicate a degree of required decoder performance for a profile.")
  public H264LevelEnum getH264Level() {
    return h264Level;
  }

  public void setH264Level(H264LevelEnum h264Level) {
    this.h264Level = h264Level;
  }

  public Profile h264Profile(H264ProfileEnum h264Profile) {
    this.h264Profile = h264Profile;
    return this;
  }

   /**
   * Profiles represent a sub-set of the encoding techniques available in H.264.
   * @return h264Profile
  **/
  @ApiModelProperty(value = "Profiles represent a sub-set of the encoding techniques available in H.264.")
  public H264ProfileEnum getH264Profile() {
    return h264Profile;
  }

  public void setH264Profile(H264ProfileEnum h264Profile) {
    this.h264Profile = h264Profile;
  }

  public Profile h264Tune(H264TuneEnum h264Tune) {
    this.h264Tune = h264Tune;
    return this;
  }

   /**
   * Specifies a h264 tuning option.
   * @return h264Tune
  **/
  @ApiModelProperty(value = "Specifies a h264 tuning option.")
  public H264TuneEnum getH264Tune() {
    return h264Tune;
  }

  public void setH264Tune(H264TuneEnum h264Tune) {
    this.h264Tune = h264Tune;
  }

  public Profile height(String height) {
    this.height = height;
    return this;
  }

   /**
   * Height in pixels.
   * @return height
  **/
  @ApiModelProperty(example = "720", value = "Height in pixels.")
  public String getHeight() {
    return height;
  }

  public void setHeight(String height) {
    this.height = height;
  }

  public Profile id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Profile imxType(String imxType) {
    this.imxType = imxType;
    return this;
  }

   /**
   * Get imxType
   * @return imxType
  **/
  @ApiModelProperty(value = "")
  public String getImxType() {
    return imxType;
  }

  public void setImxType(String imxType) {
    this.imxType = imxType;
  }

  public Profile inputs(String inputs) {
    this.inputs = inputs;
    return this;
  }

   /**
   * Get inputs
   * @return inputs
  **/
  @ApiModelProperty(value = "")
  public String getInputs() {
    return inputs;
  }

  public void setInputs(String inputs) {
    this.inputs = inputs;
  }

  public Profile interlace(String interlace) {
    this.interlace = interlace;
    return this;
  }

   /**
   * Get interlace
   * @return interlace
  **/
  @ApiModelProperty(value = "")
  public String getInterlace() {
    return interlace;
  }

  public void setInterlace(String interlace) {
    this.interlace = interlace;
  }

  public Profile keyframeInterval(String keyframeInterval) {
    this.keyframeInterval = keyframeInterval;
    return this;
  }

   /**
   * Adds a key frame every N frames. Default is 250, adds a key frame every 250 frames.
   * @return keyframeInterval
  **/
  @ApiModelProperty(value = "Adds a key frame every N frames. Default is 250, adds a key frame every 250 frames.")
  public String getKeyframeInterval() {
    return keyframeInterval;
  }

  public void setKeyframeInterval(String keyframeInterval) {
    this.keyframeInterval = keyframeInterval;
  }

  public Profile keyframeRate(String keyframeRate) {
    this.keyframeRate = keyframeRate;
    return this;
  }

   /**
   * todo
   * @return keyframeRate
  **/
  @ApiModelProperty(value = "todo")
  public String getKeyframeRate() {
    return keyframeRate;
  }

  public void setKeyframeRate(String keyframeRate) {
    this.keyframeRate = keyframeRate;
  }

  public Profile lang(String lang) {
    this.lang = lang;
    return this;
  }

   /**
   * Get lang
   * @return lang
  **/
  @ApiModelProperty(value = "")
  public String getLang() {
    return lang;
  }

  public void setLang(String lang) {
    this.lang = lang;
  }

  public Profile maxRate(String maxRate) {
    this.maxRate = maxRate;
    return this;
  }

   /**
   * A max bitrate tolerance (in bits/s). By default this is not set.
   * @return maxRate
  **/
  @ApiModelProperty(value = "A max bitrate tolerance (in bits/s). By default this is not set.")
  public String getMaxRate() {
    return maxRate;
  }

  public void setMaxRate(String maxRate) {
    this.maxRate = maxRate;
  }

  public Profile mergeAudioStreams(String mergeAudioStreams) {
    this.mergeAudioStreams = mergeAudioStreams;
    return this;
  }

   /**
   * Get mergeAudioStreams
   * @return mergeAudioStreams
  **/
  @ApiModelProperty(value = "")
  public String getMergeAudioStreams() {
    return mergeAudioStreams;
  }

  public void setMergeAudioStreams(String mergeAudioStreams) {
    this.mergeAudioStreams = mergeAudioStreams;
  }

  public Profile muteAudioTracks(Boolean muteAudioTracks) {
    this.muteAudioTracks = muteAudioTracks;
    return this;
  }

   /**
   * Remove audio from input video file. By default it is set to &#x60;false&#x60;.
   * @return muteAudioTracks
  **/
  @ApiModelProperty(value = "Remove audio from input video file. By default it is set to `false`.")
  public Boolean isMuteAudioTracks() {
    return muteAudioTracks;
  }

  public void setMuteAudioTracks(Boolean muteAudioTracks) {
    this.muteAudioTracks = muteAudioTracks;
  }

  public Profile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A unique machine-readable name that will identify the profile. Helpful later on for filtering encodings by profile.
   * @return name
  **/
  @ApiModelProperty(value = "A unique machine-readable name that will identify the profile. Helpful later on for filtering encodings by profile.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Profile outputs(String outputs) {
    this.outputs = outputs;
    return this;
  }

   /**
   * Get outputs
   * @return outputs
  **/
  @ApiModelProperty(value = "")
  public String getOutputs() {
    return outputs;
  }

  public void setOutputs(String outputs) {
    this.outputs = outputs;
  }

  public Profile outputsPathFormat(String outputsPathFormat) {
    this.outputsPathFormat = outputsPathFormat;
    return this;
  }

   /**
   * Specify the directory where the output files should be stored. By default it is not set. More information about this [here](https://cloud.telestream.net/docs#path-format---know-how).
   * @return outputsPathFormat
  **/
  @ApiModelProperty(value = "Specify the directory where the output files should be stored. By default it is not set. More information about this [here](https://cloud.telestream.net/docs#path-format---know-how).")
  public String getOutputsPathFormat() {
    return outputsPathFormat;
  }

  public void setOutputsPathFormat(String outputsPathFormat) {
    this.outputsPathFormat = outputsPathFormat;
  }

  public Profile playlistType(PlaylistTypeEnum playlistType) {
    this.playlistType = playlistType;
    return this;
  }

   /**
   * Get playlistType
   * @return playlistType
  **/
  @ApiModelProperty(value = "")
  public PlaylistTypeEnum getPlaylistType() {
    return playlistType;
  }

  public void setPlaylistType(PlaylistTypeEnum playlistType) {
    this.playlistType = playlistType;
  }

  public Profile pmtPid(String pmtPid) {
    this.pmtPid = pmtPid;
    return this;
  }

   /**
   * Get pmtPid
   * @return pmtPid
  **/
  @ApiModelProperty(value = "")
  public String getPmtPid() {
    return pmtPid;
  }

  public void setPmtPid(String pmtPid) {
    this.pmtPid = pmtPid;
  }

  public Profile presetName(PresetNameEnum presetName) {
    this.presetName = presetName;
    return this;
  }

   /**
   * a name of a preset that a profile will use.
   * @return presetName
  **/
  @ApiModelProperty(value = "a name of a preset that a profile will use.")
  public PresetNameEnum getPresetName() {
    return presetName;
  }

  public void setPresetName(PresetNameEnum presetName) {
    this.presetName = presetName;
  }

  public Profile proresFormat(String proresFormat) {
    this.proresFormat = proresFormat;
    return this;
  }

   /**
   * Get proresFormat
   * @return proresFormat
  **/
  @ApiModelProperty(value = "")
  public String getProresFormat() {
    return proresFormat;
  }

  public void setProresFormat(String proresFormat) {
    this.proresFormat = proresFormat;
  }

  public Profile segmentTime(Integer segmentTime) {
    this.segmentTime = segmentTime;
    return this;
  }

   /**
   * Minimum value is 2, maximum is 60.
   * @return segmentTime
  **/
  @ApiModelProperty(value = "Minimum value is 2, maximum is 60.")
  public Integer getSegmentTime() {
    return segmentTime;
  }

  public void setSegmentTime(Integer segmentTime) {
    this.segmentTime = segmentTime;
  }

  public Profile stack(String stack) {
    this.stack = stack;
    return this;
  }

   /**
   * Get stack
   * @return stack
  **/
  @ApiModelProperty(value = "")
  public String getStack() {
    return stack;
  }

  public void setStack(String stack) {
    this.stack = stack;
  }

  public Profile telestreamBlockSize(TelestreamBlockSizeEnum telestreamBlockSize) {
    this.telestreamBlockSize = telestreamBlockSize;
    return this;
  }

   /**
   * Get telestreamBlockSize
   * @return telestreamBlockSize
  **/
  @ApiModelProperty(value = "")
  public TelestreamBlockSizeEnum getTelestreamBlockSize() {
    return telestreamBlockSize;
  }

  public void setTelestreamBlockSize(TelestreamBlockSizeEnum telestreamBlockSize) {
    this.telestreamBlockSize = telestreamBlockSize;
  }

  public Profile telestreamBlurScaler(BigDecimal telestreamBlurScaler) {
    this.telestreamBlurScaler = telestreamBlurScaler;
    return this;
  }

   /**
   * Minimum value is 0, maximum is 4.
   * @return telestreamBlurScaler
  **/
  @ApiModelProperty(value = "Minimum value is 0, maximum is 4.")
  public BigDecimal getTelestreamBlurScaler() {
    return telestreamBlurScaler;
  }

  public void setTelestreamBlurScaler(BigDecimal telestreamBlurScaler) {
    this.telestreamBlurScaler = telestreamBlurScaler;
  }

  public Profile telestreamCostScaler(BigDecimal telestreamCostScaler) {
    this.telestreamCostScaler = telestreamCostScaler;
    return this;
  }

   /**
   * Minimum value is 0, maximum is 4.
   * @return telestreamCostScaler
  **/
  @ApiModelProperty(value = "Minimum value is 0, maximum is 4.")
  public BigDecimal getTelestreamCostScaler() {
    return telestreamCostScaler;
  }

  public void setTelestreamCostScaler(BigDecimal telestreamCostScaler) {
    this.telestreamCostScaler = telestreamCostScaler;
  }

  public Profile telestreamSearchLengthScaler(Integer telestreamSearchLengthScaler) {
    this.telestreamSearchLengthScaler = telestreamSearchLengthScaler;
    return this;
  }

   /**
   * Minimum value is 0, maximum is 2.
   * @return telestreamSearchLengthScaler
  **/
  @ApiModelProperty(value = "Minimum value is 0, maximum is 2.")
  public Integer getTelestreamSearchLengthScaler() {
    return telestreamSearchLengthScaler;
  }

  public void setTelestreamSearchLengthScaler(Integer telestreamSearchLengthScaler) {
    this.telestreamSearchLengthScaler = telestreamSearchLengthScaler;
  }

  public Profile telestreamSubpelMode(Boolean telestreamSubpelMode) {
    this.telestreamSubpelMode = telestreamSubpelMode;
    return this;
  }

   /**
   * Get telestreamSubpelMode
   * @return telestreamSubpelMode
  **/
  @ApiModelProperty(value = "")
  public Boolean isTelestreamSubpelMode() {
    return telestreamSubpelMode;
  }

  public void setTelestreamSubpelMode(Boolean telestreamSubpelMode) {
    this.telestreamSubpelMode = telestreamSubpelMode;
  }

  public Profile timeCode(String timeCode) {
    this.timeCode = timeCode;
    return this;
  }

   /**
   * If set, timestamps will be added to your videos. By default this is not set.
   * @return timeCode
  **/
  @ApiModelProperty(value = "If set, timestamps will be added to your videos. By default this is not set.")
  public String getTimeCode() {
    return timeCode;
  }

  public void setTimeCode(String timeCode) {
    this.timeCode = timeCode;
  }

  public Profile title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Human-readable name.
   * @return title
  **/
  @ApiModelProperty(value = "Human-readable name.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Profile trailers(String trailers) {
    this.trailers = trailers;
    return this;
  }

   /**
   * Get trailers
   * @return trailers
  **/
  @ApiModelProperty(value = "")
  public String getTrailers() {
    return trailers;
  }

  public void setTrailers(String trailers) {
    this.trailers = trailers;
  }

  public Profile transportRate(String transportRate) {
    this.transportRate = transportRate;
    return this;
  }

   /**
   * Get transportRate
   * @return transportRate
  **/
  @ApiModelProperty(value = "")
  public String getTransportRate() {
    return transportRate;
  }

  public void setTransportRate(String transportRate) {
    this.transportRate = transportRate;
  }

  public Profile tsPids(String tsPids) {
    this.tsPids = tsPids;
    return this;
  }

   /**
   * Get tsPids
   * @return tsPids
  **/
  @ApiModelProperty(value = "")
  public String getTsPids() {
    return tsPids;
  }

  public void setTsPids(String tsPids) {
    this.tsPids = tsPids;
  }

  public Profile updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @ApiModelProperty(value = "")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Profile upscale(Boolean upscale) {
    this.upscale = upscale;
    return this;
  }

   /**
   * Upscale the video resolution to match your profile. Default is &#x60;true&#x60;.
   * @return upscale
  **/
  @ApiModelProperty(value = "Upscale the video resolution to match your profile. Default is `true`.")
  public Boolean isUpscale() {
    return upscale;
  }

  public void setUpscale(Boolean upscale) {
    this.upscale = upscale;
  }

  public Profile useEditlist(Boolean useEditlist) {
    this.useEditlist = useEditlist;
    return this;
  }

   /**
   * Get useEditlist
   * @return useEditlist
  **/
  @ApiModelProperty(value = "")
  public Boolean isUseEditlist() {
    return useEditlist;
  }

  public void setUseEditlist(Boolean useEditlist) {
    this.useEditlist = useEditlist;
  }

  public Profile variants(String variants) {
    this.variants = variants;
    return this;
  }

   /**
   * Pattern utilised to match HLS.Variant presets by name. Default is hls.*.
   * @return variants
  **/
  @ApiModelProperty(value = "Pattern utilised to match HLS.Variant presets by name. Default is hls.*.")
  public String getVariants() {
    return variants;
  }

  public void setVariants(String variants) {
    this.variants = variants;
  }

  public Profile videoBitrate(String videoBitrate) {
    this.videoBitrate = videoBitrate;
    return this;
  }

   /**
   * Get videoBitrate
   * @return videoBitrate
  **/
  @ApiModelProperty(example = "3000", value = "")
  public String getVideoBitrate() {
    return videoBitrate;
  }

  public void setVideoBitrate(String videoBitrate) {
    this.videoBitrate = videoBitrate;
  }

  public Profile videoPid(String videoPid) {
    this.videoPid = videoPid;
    return this;
  }

   /**
   * Get videoPid
   * @return videoPid
  **/
  @ApiModelProperty(value = "")
  public String getVideoPid() {
    return videoPid;
  }

  public void setVideoPid(String videoPid) {
    this.videoPid = videoPid;
  }

  public Profile watermarkBottom(String watermarkBottom) {
    this.watermarkBottom = watermarkBottom;
    return this;
  }

   /**
   * Distance from the bottom of the video frame in pixels or percentage of video frame height. Works like CSS. Default is &#x60;0&#x60;.
   * @return watermarkBottom
  **/
  @ApiModelProperty(value = "Distance from the bottom of the video frame in pixels or percentage of video frame height. Works like CSS. Default is `0`.")
  public String getWatermarkBottom() {
    return watermarkBottom;
  }

  public void setWatermarkBottom(String watermarkBottom) {
    this.watermarkBottom = watermarkBottom;
  }

  public Profile watermarkBumpers(Boolean watermarkBumpers) {
    this.watermarkBumpers = watermarkBumpers;
    return this;
  }

   /**
   * Get watermarkBumpers
   * @return watermarkBumpers
  **/
  @ApiModelProperty(value = "")
  public Boolean isWatermarkBumpers() {
    return watermarkBumpers;
  }

  public void setWatermarkBumpers(Boolean watermarkBumpers) {
    this.watermarkBumpers = watermarkBumpers;
  }

  public Profile watermarkHeight(String watermarkHeight) {
    this.watermarkHeight = watermarkHeight;
    return this;
  }

   /**
   * Height of the watermark image in pixels or percentage of video frame height. Default is no resizing
   * @return watermarkHeight
  **/
  @ApiModelProperty(value = "Height of the watermark image in pixels or percentage of video frame height. Default is no resizing")
  public String getWatermarkHeight() {
    return watermarkHeight;
  }

  public void setWatermarkHeight(String watermarkHeight) {
    this.watermarkHeight = watermarkHeight;
  }

  public Profile watermarkLeft(String watermarkLeft) {
    this.watermarkLeft = watermarkLeft;
    return this;
  }

   /**
   * Distance from the left of the video frame in pixels or percentage of video frame width. Works like CSS. Default is &#x60;0&#x60;.
   * @return watermarkLeft
  **/
  @ApiModelProperty(value = "Distance from the left of the video frame in pixels or percentage of video frame width. Works like CSS. Default is `0`.")
  public String getWatermarkLeft() {
    return watermarkLeft;
  }

  public void setWatermarkLeft(String watermarkLeft) {
    this.watermarkLeft = watermarkLeft;
  }

  public Profile watermarkRight(String watermarkRight) {
    this.watermarkRight = watermarkRight;
    return this;
  }

   /**
   * Distance from the right of the video frame in pixels or percentage of video frame width. Works like CSS. Default is &#x60;0&#x60;.
   * @return watermarkRight
  **/
  @ApiModelProperty(value = "Distance from the right of the video frame in pixels or percentage of video frame width. Works like CSS. Default is `0`.")
  public String getWatermarkRight() {
    return watermarkRight;
  }

  public void setWatermarkRight(String watermarkRight) {
    this.watermarkRight = watermarkRight;
  }

  public Profile watermarkTop(String watermarkTop) {
    this.watermarkTop = watermarkTop;
    return this;
  }

   /**
   * Distance from the top of the video frame in pixels or percentage of video frame height. Works like CSS. Default is &#x60;0&#x60;.
   * @return watermarkTop
  **/
  @ApiModelProperty(value = "Distance from the top of the video frame in pixels or percentage of video frame height. Works like CSS. Default is `0`.")
  public String getWatermarkTop() {
    return watermarkTop;
  }

  public void setWatermarkTop(String watermarkTop) {
    this.watermarkTop = watermarkTop;
  }

  public Profile watermarkTrailers(Boolean watermarkTrailers) {
    this.watermarkTrailers = watermarkTrailers;
    return this;
  }

   /**
   * Get watermarkTrailers
   * @return watermarkTrailers
  **/
  @ApiModelProperty(value = "")
  public Boolean isWatermarkTrailers() {
    return watermarkTrailers;
  }

  public void setWatermarkTrailers(Boolean watermarkTrailers) {
    this.watermarkTrailers = watermarkTrailers;
  }

  public Profile watermarkUrl(String watermarkUrl) {
    this.watermarkUrl = watermarkUrl;
    return this;
  }

   /**
   * Url of a watermark image.
   * @return watermarkUrl
  **/
  @ApiModelProperty(value = "Url of a watermark image.")
  public String getWatermarkUrl() {
    return watermarkUrl;
  }

  public void setWatermarkUrl(String watermarkUrl) {
    this.watermarkUrl = watermarkUrl;
  }

  public Profile watermarkWidth(String watermarkWidth) {
    this.watermarkWidth = watermarkWidth;
    return this;
  }

   /**
   * Width of the watermark image in pixels or percentage of video frame width. Default is &#x60;no resizing&#x60;.
   * @return watermarkWidth
  **/
  @ApiModelProperty(value = "Width of the watermark image in pixels or percentage of video frame width. Default is `no resizing`.")
  public String getWatermarkWidth() {
    return watermarkWidth;
  }

  public void setWatermarkWidth(String watermarkWidth) {
    this.watermarkWidth = watermarkWidth;
  }

  public Profile width(String width) {
    this.width = width;
    return this;
  }

   /**
   * Width in pixels.
   * @return width
  **/
  @ApiModelProperty(example = "1080", value = "Width in pixels.")
  public String getWidth() {
    return width;
  }

  public void setWidth(String width) {
    this.width = width;
  }

  public Profile x264Options(String x264Options) {
    this.x264Options = x264Options;
    return this;
  }

   /**
   * Get x264Options
   * @return x264Options
  **/
  @ApiModelProperty(value = "")
  public String getX264Options() {
    return x264Options;
  }

  public void setX264Options(String x264Options) {
    this.x264Options = x264Options;
  }

  public Profile x265Options(String x265Options) {
    this.x265Options = x265Options;
    return this;
  }

   /**
   * Get x265Options
   * @return x265Options
  **/
  @ApiModelProperty(value = "")
  public String getX265Options() {
    return x265Options;
  }

  public void setX265Options(String x265Options) {
    this.x265Options = x265Options;
  }

  public Profile xdcamFormat(String xdcamFormat) {
    this.xdcamFormat = xdcamFormat;
    return this;
  }

   /**
   * Get xdcamFormat
   * @return xdcamFormat
  **/
  @ApiModelProperty(value = "")
  public String getXdcamFormat() {
    return xdcamFormat;
  }

  public void setXdcamFormat(String xdcamFormat) {
    this.xdcamFormat = xdcamFormat;
  }

  public Profile tachyonAllowRemovePulldown(Boolean tachyonAllowRemovePulldown) {
    this.tachyonAllowRemovePulldown = tachyonAllowRemovePulldown;
    return this;
  }

   /**
   * Enable more sensitive pulldown removal algorithm.
   * @return tachyonAllowRemovePulldown
  **/
  @ApiModelProperty(value = "Enable more sensitive pulldown removal algorithm.")
  public Boolean isTachyonAllowRemovePulldown() {
    return tachyonAllowRemovePulldown;
  }

  public void setTachyonAllowRemovePulldown(Boolean tachyonAllowRemovePulldown) {
    this.tachyonAllowRemovePulldown = tachyonAllowRemovePulldown;
  }

  public Profile tachyonEnablePostPulldownFilter(Boolean tachyonEnablePostPulldownFilter) {
    this.tachyonEnablePostPulldownFilter = tachyonEnablePostPulldownFilter;
    return this;
  }

   /**
   * If the images you are converting are composited 29.976, but the pulldown pattern was not adhered to when performing the composite, this setting is required to remove combing artifacts. It will also remove combing artifacts related to very poor 3:2 cadence.
   * @return tachyonEnablePostPulldownFilter
  **/
  @ApiModelProperty(value = "If the images you are converting are composited 29.976, but the pulldown pattern was not adhered to when performing the composite, this setting is required to remove combing artifacts. It will also remove combing artifacts related to very poor 3:2 cadence.")
  public Boolean isTachyonEnablePostPulldownFilter() {
    return tachyonEnablePostPulldownFilter;
  }

  public void setTachyonEnablePostPulldownFilter(Boolean tachyonEnablePostPulldownFilter) {
    this.tachyonEnablePostPulldownFilter = tachyonEnablePostPulldownFilter;
  }

  public Profile tachyonMediaHintIsCartoon(Boolean tachyonMediaHintIsCartoon) {
    this.tachyonMediaHintIsCartoon = tachyonMediaHintIsCartoon;
    return this;
  }

   /**
   * Get tachyonMediaHintIsCartoon
   * @return tachyonMediaHintIsCartoon
  **/
  @ApiModelProperty(value = "")
  public Boolean isTachyonMediaHintIsCartoon() {
    return tachyonMediaHintIsCartoon;
  }

  public void setTachyonMediaHintIsCartoon(Boolean tachyonMediaHintIsCartoon) {
    this.tachyonMediaHintIsCartoon = tachyonMediaHintIsCartoon;
  }

  public Profile tachyonMediaHintHasChromaNoise(Boolean tachyonMediaHintHasChromaNoise) {
    this.tachyonMediaHintHasChromaNoise = tachyonMediaHintHasChromaNoise;
    return this;
  }

   /**
   * Remove chroma noise during the analysis of a video.
   * @return tachyonMediaHintHasChromaNoise
  **/
  @ApiModelProperty(value = "Remove chroma noise during the analysis of a video.")
  public Boolean isTachyonMediaHintHasChromaNoise() {
    return tachyonMediaHintHasChromaNoise;
  }

  public void setTachyonMediaHintHasChromaNoise(Boolean tachyonMediaHintHasChromaNoise) {
    this.tachyonMediaHintHasChromaNoise = tachyonMediaHintHasChromaNoise;
  }

  public Profile tachyonMoreSensitiveRemovePulldown(Boolean tachyonMoreSensitiveRemovePulldown) {
    this.tachyonMoreSensitiveRemovePulldown = tachyonMoreSensitiveRemovePulldown;
    return this;
  }

   /**
   * When pulldown is not achieved due to extremely broken cadence, or other factors like highly mixed content or if chroma noise masks motion, the pulldown engine may fall back to de-interlacing rather than removing telecine. If that&#39;s a case, a more sensitive pulldown pattern can be used. This algorithm favors inverse telecine and with lower thresholds for triggering pulldown identification, will maximize the number of progressive frames created from the video.
   * @return tachyonMoreSensitiveRemovePulldown
  **/
  @ApiModelProperty(value = "When pulldown is not achieved due to extremely broken cadence, or other factors like highly mixed content or if chroma noise masks motion, the pulldown engine may fall back to de-interlacing rather than removing telecine. If that's a case, a more sensitive pulldown pattern can be used. This algorithm favors inverse telecine and with lower thresholds for triggering pulldown identification, will maximize the number of progressive frames created from the video.")
  public Boolean isTachyonMoreSensitiveRemovePulldown() {
    return tachyonMoreSensitiveRemovePulldown;
  }

  public void setTachyonMoreSensitiveRemovePulldown(Boolean tachyonMoreSensitiveRemovePulldown) {
    this.tachyonMoreSensitiveRemovePulldown = tachyonMoreSensitiveRemovePulldown;
  }

  public Profile tachyonAllowAddStandardPd(Boolean tachyonAllowAddStandardPd) {
    this.tachyonAllowAddStandardPd = tachyonAllowAddStandardPd;
    return this;
  }

   /**
   * Get tachyonAllowAddStandardPd
   * @return tachyonAllowAddStandardPd
  **/
  @ApiModelProperty(value = "")
  public Boolean isTachyonAllowAddStandardPd() {
    return tachyonAllowAddStandardPd;
  }

  public void setTachyonAllowAddStandardPd(Boolean tachyonAllowAddStandardPd) {
    this.tachyonAllowAddStandardPd = tachyonAllowAddStandardPd;
  }

  public Profile tachyonAllowAdd22pd(Boolean tachyonAllowAdd22pd) {
    this.tachyonAllowAdd22pd = tachyonAllowAdd22pd;
    return this;
  }

   /**
   * Allows 2:2 (PSF) Insertion. Creates a new series of frames which are based on duplicating the field an interlacing it into top/bottom field. Maintains a film-look.
   * @return tachyonAllowAdd22pd
  **/
  @ApiModelProperty(value = "Allows 2:2 (PSF) Insertion. Creates a new series of frames which are based on duplicating the field an interlacing it into top/bottom field. Maintains a film-look.")
  public Boolean isTachyonAllowAdd22pd() {
    return tachyonAllowAdd22pd;
  }

  public void setTachyonAllowAdd22pd(Boolean tachyonAllowAdd22pd) {
    this.tachyonAllowAdd22pd = tachyonAllowAdd22pd;
  }

  public Profile tachyonAllowAdd44pd(Boolean tachyonAllowAdd44pd) {
    this.tachyonAllowAdd44pd = tachyonAllowAdd44pd;
    return this;
  }

   /**
   * Allows 4:4 Insertion. Repeats each progressive frame twice on output (motion rate is halved). This setting is used when you want to convert to high progressive frame rates (i.e. 50p/59.94p/60p) but want to preserve film qualities (low motion rate, such as 24p).
   * @return tachyonAllowAdd44pd
  **/
  @ApiModelProperty(value = "Allows 4:4 Insertion. Repeats each progressive frame twice on output (motion rate is halved). This setting is used when you want to convert to high progressive frame rates (i.e. 50p/59.94p/60p) but want to preserve film qualities (low motion rate, such as 24p).")
  public Boolean isTachyonAllowAdd44pd() {
    return tachyonAllowAdd44pd;
  }

  public void setTachyonAllowAdd44pd(Boolean tachyonAllowAdd44pd) {
    this.tachyonAllowAdd44pd = tachyonAllowAdd44pd;
  }

  public Profile tachyonAllowAdd46pd(Boolean tachyonAllowAdd46pd) {
    this.tachyonAllowAdd46pd = tachyonAllowAdd46pd;
    return this;
  }

   /**
   * 2:3 Insertion. inserts a standard 2:3 telecine pattern to 23.976p video stream to achieve a 29.97i frame rate
   * @return tachyonAllowAdd46pd
  **/
  @ApiModelProperty(value = "2:3 Insertion. inserts a standard 2:3 telecine pattern to 23.976p video stream to achieve a 29.97i frame rate")
  public Boolean isTachyonAllowAdd46pd() {
    return tachyonAllowAdd46pd;
  }

  public void setTachyonAllowAdd46pd(Boolean tachyonAllowAdd46pd) {
    this.tachyonAllowAdd46pd = tachyonAllowAdd46pd;
  }

  public Profile tachyonAllowAddEuroPd(Boolean tachyonAllowAddEuroPd) {
    this.tachyonAllowAddEuroPd = tachyonAllowAddEuroPd;
    return this;
  }

   /**
   * Allows Euro Insertion. For field based interpolation rather than pixel-based. This is designed for interlaced or progressive integer frame rate conversions that are being converted to interlaced outputs. This method is valid for 24p to 50i conversions only.
   * @return tachyonAllowAddEuroPd
  **/
  @ApiModelProperty(value = "Allows Euro Insertion. For field based interpolation rather than pixel-based. This is designed for interlaced or progressive integer frame rate conversions that are being converted to interlaced outputs. This method is valid for 24p to 50i conversions only.")
  public Boolean isTachyonAllowAddEuroPd() {
    return tachyonAllowAddEuroPd;
  }

  public void setTachyonAllowAddEuroPd(Boolean tachyonAllowAddEuroPd) {
    this.tachyonAllowAddEuroPd = tachyonAllowAddEuroPd;
  }

  public Profile tachyonAllowAddAdaptivePd(Boolean tachyonAllowAddAdaptivePd) {
    this.tachyonAllowAddAdaptivePd = tachyonAllowAddAdaptivePd;
    return this;
  }

   /**
   * Allows Adaptive Insertion. For field-based interpolation rather than using pixel-based interpolation. This algorithm is designed for both integer and non-integer frame rate conversion targets - as long as one of them is a non-integer rate (23.976, 29.97, 59.94, etc). This creates NTSC-PAL conversions clean of motion artifacts at the expense of potential slight stutter. Stutter is most noticeable with material that has smooth and uniform motion.
   * @return tachyonAllowAddAdaptivePd
  **/
  @ApiModelProperty(value = "Allows Adaptive Insertion. For field-based interpolation rather than using pixel-based interpolation. This algorithm is designed for both integer and non-integer frame rate conversion targets - as long as one of them is a non-integer rate (23.976, 29.97, 59.94, etc). This creates NTSC-PAL conversions clean of motion artifacts at the expense of potential slight stutter. Stutter is most noticeable with material that has smooth and uniform motion.")
  public Boolean isTachyonAllowAddAdaptivePd() {
    return tachyonAllowAddAdaptivePd;
  }

  public void setTachyonAllowAddAdaptivePd(Boolean tachyonAllowAddAdaptivePd) {
    this.tachyonAllowAddAdaptivePd = tachyonAllowAddAdaptivePd;
  }

  public Profile tachyonMotionAmount(TachyonMotionAmountEnum tachyonMotionAmount) {
    this.tachyonMotionAmount = tachyonMotionAmount;
    return this;
  }

   /**
   * This setting determines how much Tachyon will trust motion vectors in the creation of new images
   * @return tachyonMotionAmount
  **/
  @ApiModelProperty(value = "This setting determines how much Tachyon will trust motion vectors in the creation of new images")
  public TachyonMotionAmountEnum getTachyonMotionAmount() {
    return tachyonMotionAmount;
  }

  public void setTachyonMotionAmount(TachyonMotionAmountEnum tachyonMotionAmount) {
    this.tachyonMotionAmount = tachyonMotionAmount;
  }

  public Profile tachyonFallbackSize(TachyonFallbackSizeEnum tachyonFallbackSize) {
    this.tachyonFallbackSize = tachyonFallbackSize;
    return this;
  }

   /**
   * This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.
   * @return tachyonFallbackSize
  **/
  @ApiModelProperty(value = "This option specifies the transition region size between fallback areas and motion compensated areas. A larger fallback size allows more blending (feathering) to occur between the regions.")
  public TachyonFallbackSizeEnum getTachyonFallbackSize() {
    return tachyonFallbackSize;
  }

  public void setTachyonFallbackSize(TachyonFallbackSizeEnum tachyonFallbackSize) {
    this.tachyonFallbackSize = tachyonFallbackSize;
  }

  public Profile tachyonMblockSize(TachyonMblockSizeEnum tachyonMblockSize) {
    this.tachyonMblockSize = tachyonMblockSize;
    return this;
  }

   /**
   * This option specifies the size of a motion block.
   * @return tachyonMblockSize
  **/
  @ApiModelProperty(value = "This option specifies the size of a motion block.")
  public TachyonMblockSizeEnum getTachyonMblockSize() {
    return tachyonMblockSize;
  }

  public void setTachyonMblockSize(TachyonMblockSizeEnum tachyonMblockSize) {
    this.tachyonMblockSize = tachyonMblockSize;
  }

  public Profile tachyonCutDetectionSensitivity(BigDecimal tachyonCutDetectionSensitivity) {
    this.tachyonCutDetectionSensitivity = tachyonCutDetectionSensitivity;
    return this;
  }

   /**
   * Get tachyonCutDetectionSensitivity
   * @return tachyonCutDetectionSensitivity
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getTachyonCutDetectionSensitivity() {
    return tachyonCutDetectionSensitivity;
  }

  public void setTachyonCutDetectionSensitivity(BigDecimal tachyonCutDetectionSensitivity) {
    this.tachyonCutDetectionSensitivity = tachyonCutDetectionSensitivity;
  }

  public Profile eac3EvolutionEnable(Boolean eac3EvolutionEnable) {
    this.eac3EvolutionEnable = eac3EvolutionEnable;
    return this;
  }

   /**
   * Enables the trusted metadata framework.
   * @return eac3EvolutionEnable
  **/
  @ApiModelProperty(value = "Enables the trusted metadata framework.")
  public Boolean isEac3EvolutionEnable() {
    return eac3EvolutionEnable;
  }

  public void setEac3EvolutionEnable(Boolean eac3EvolutionEnable) {
    this.eac3EvolutionEnable = eac3EvolutionEnable;
  }

  public Profile eac3BitstreamMode(Eac3BitstreamModeEnum eac3BitstreamMode) {
    this.eac3BitstreamMode = eac3BitstreamMode;
    return this;
  }

   /**
   * Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.
   * @return eac3BitstreamMode
  **/
  @ApiModelProperty(value = "Selects the type of audio service. **For 1/0 Voiceover will be used when Voiceover/Karaoke is selected. For 2/0 and above Karaoke will be used.")
  public Eac3BitstreamModeEnum getEac3BitstreamMode() {
    return eac3BitstreamMode;
  }

  public void setEac3BitstreamMode(Eac3BitstreamModeEnum eac3BitstreamMode) {
    this.eac3BitstreamMode = eac3BitstreamMode;
  }

  public Profile eac3NinetyDegreePhaseShift(Boolean eac3NinetyDegreePhaseShift) {
    this.eac3NinetyDegreePhaseShift = eac3NinetyDegreePhaseShift;
    return this;
  }

   /**
   * Applies a 90-degree phase shift to the surround channels; necessary if the output file is being decoded by a Dolby Surround Pro Logic or Pro Logic II decoder.
   * @return eac3NinetyDegreePhaseShift
  **/
  @ApiModelProperty(value = "Applies a 90-degree phase shift to the surround channels; necessary if the output file is being decoded by a Dolby Surround Pro Logic or Pro Logic II decoder.")
  public Boolean isEac3NinetyDegreePhaseShift() {
    return eac3NinetyDegreePhaseShift;
  }

  public void setEac3NinetyDegreePhaseShift(Boolean eac3NinetyDegreePhaseShift) {
    this.eac3NinetyDegreePhaseShift = eac3NinetyDegreePhaseShift;
  }

  public Profile eac3ThreeDecibelAttenuation(Boolean eac3ThreeDecibelAttenuation) {
    this.eac3ThreeDecibelAttenuation = eac3ThreeDecibelAttenuation;
    return this;
  }

   /**
   * Attenuates the surround channels by 3 dB before encoding.
   * @return eac3ThreeDecibelAttenuation
  **/
  @ApiModelProperty(value = "Attenuates the surround channels by 3 dB before encoding.")
  public Boolean isEac3ThreeDecibelAttenuation() {
    return eac3ThreeDecibelAttenuation;
  }

  public void setEac3ThreeDecibelAttenuation(Boolean eac3ThreeDecibelAttenuation) {
    this.eac3ThreeDecibelAttenuation = eac3ThreeDecibelAttenuation;
  }

  public Profile eac3EnableLfeLowPassFilter(Boolean eac3EnableLfeLowPassFilter) {
    this.eac3EnableLfeLowPassFilter = eac3EnableLfeLowPassFilter;
    return this;
  }

   /**
   * Applies a 120 Hz eighth order lowpass filter to the LFE input prior to encoding.
   * @return eac3EnableLfeLowPassFilter
  **/
  @ApiModelProperty(value = "Applies a 120 Hz eighth order lowpass filter to the LFE input prior to encoding.")
  public Boolean isEac3EnableLfeLowPassFilter() {
    return eac3EnableLfeLowPassFilter;
  }

  public void setEac3EnableLfeLowPassFilter(Boolean eac3EnableLfeLowPassFilter) {
    this.eac3EnableLfeLowPassFilter = eac3EnableLfeLowPassFilter;
  }

  public Profile eac3AnalogToDigitalConverterType(Eac3AnalogToDigitalConverterTypeEnum eac3AnalogToDigitalConverterType) {
    this.eac3AnalogToDigitalConverterType = eac3AnalogToDigitalConverterType;
    return this;
  }

   /**
   * Allows audio that has passed through an A/D conversion stage to be marked as such.
   * @return eac3AnalogToDigitalConverterType
  **/
  @ApiModelProperty(value = "Allows audio that has passed through an A/D conversion stage to be marked as such.")
  public Eac3AnalogToDigitalConverterTypeEnum getEac3AnalogToDigitalConverterType() {
    return eac3AnalogToDigitalConverterType;
  }

  public void setEac3AnalogToDigitalConverterType(Eac3AnalogToDigitalConverterTypeEnum eac3AnalogToDigitalConverterType) {
    this.eac3AnalogToDigitalConverterType = eac3AnalogToDigitalConverterType;
  }

  public Profile eac3StereoDownmixPreference(Eac3StereoDownmixPreferenceEnum eac3StereoDownmixPreference) {
    this.eac3StereoDownmixPreference = eac3StereoDownmixPreference;
    return this;
  }

   /**
   * Get eac3StereoDownmixPreference
   * @return eac3StereoDownmixPreference
  **/
  @ApiModelProperty(value = "")
  public Eac3StereoDownmixPreferenceEnum getEac3StereoDownmixPreference() {
    return eac3StereoDownmixPreference;
  }

  public void setEac3StereoDownmixPreference(Eac3StereoDownmixPreferenceEnum eac3StereoDownmixPreference) {
    this.eac3StereoDownmixPreference = eac3StereoDownmixPreference;
  }

  public Profile eac3LtRtCenterMixLevel(Eac3LtRtCenterMixLevelEnum eac3LtRtCenterMixLevel) {
    this.eac3LtRtCenterMixLevel = eac3LtRtCenterMixLevel;
    return this;
  }

   /**
   * Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
   * @return eac3LtRtCenterMixLevel
  **/
  @ApiModelProperty(value = "Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lt/Rt output.")
  public Eac3LtRtCenterMixLevelEnum getEac3LtRtCenterMixLevel() {
    return eac3LtRtCenterMixLevel;
  }

  public void setEac3LtRtCenterMixLevel(Eac3LtRtCenterMixLevelEnum eac3LtRtCenterMixLevel) {
    this.eac3LtRtCenterMixLevel = eac3LtRtCenterMixLevel;
  }

  public Profile eac3LtRtSurroundMixLevel(Eac3LtRtSurroundMixLevelEnum eac3LtRtSurroundMixLevel) {
    this.eac3LtRtSurroundMixLevel = eac3LtRtSurroundMixLevel;
    return this;
  }

   /**
   * Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.
   * @return eac3LtRtSurroundMixLevel
  **/
  @ApiModelProperty(value = "Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lt/Rt output.")
  public Eac3LtRtSurroundMixLevelEnum getEac3LtRtSurroundMixLevel() {
    return eac3LtRtSurroundMixLevel;
  }

  public void setEac3LtRtSurroundMixLevel(Eac3LtRtSurroundMixLevelEnum eac3LtRtSurroundMixLevel) {
    this.eac3LtRtSurroundMixLevel = eac3LtRtSurroundMixLevel;
  }

  public Profile eac3LoRoCenterMixLevel(Eac3LoRoCenterMixLevelEnum eac3LoRoCenterMixLevel) {
    this.eac3LoRoCenterMixLevel = eac3LoRoCenterMixLevel;
    return this;
  }

   /**
   * Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
   * @return eac3LoRoCenterMixLevel
  **/
  @ApiModelProperty(value = "Indicates the level shift applied to the center channel when adding to the left and right outputs during a downmix to a Lo/Ro output.")
  public Eac3LoRoCenterMixLevelEnum getEac3LoRoCenterMixLevel() {
    return eac3LoRoCenterMixLevel;
  }

  public void setEac3LoRoCenterMixLevel(Eac3LoRoCenterMixLevelEnum eac3LoRoCenterMixLevel) {
    this.eac3LoRoCenterMixLevel = eac3LoRoCenterMixLevel;
  }

  public Profile eac3LoRoSurroundMixLevel(Eac3LoRoSurroundMixLevelEnum eac3LoRoSurroundMixLevel) {
    this.eac3LoRoSurroundMixLevel = eac3LoRoSurroundMixLevel;
    return this;
  }

   /**
   * Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.
   * @return eac3LoRoSurroundMixLevel
  **/
  @ApiModelProperty(value = "Indicates the level shift applied to the surround channel when adding to the left and right outputs during a downmix to a Lo/Ro output.")
  public Eac3LoRoSurroundMixLevelEnum getEac3LoRoSurroundMixLevel() {
    return eac3LoRoSurroundMixLevel;
  }

  public void setEac3LoRoSurroundMixLevel(Eac3LoRoSurroundMixLevelEnum eac3LoRoSurroundMixLevel) {
    this.eac3LoRoSurroundMixLevel = eac3LoRoSurroundMixLevel;
  }

  public Profile eac3SurroundExMode(Eac3SurroundExModeEnum eac3SurroundExMode) {
    this.eac3SurroundExMode = eac3SurroundExMode;
    return this;
  }

   /**
   * Indicates whether the audio stream was encoded using Dolby EX.
   * @return eac3SurroundExMode
  **/
  @ApiModelProperty(value = "Indicates whether the audio stream was encoded using Dolby EX.")
  public Eac3SurroundExModeEnum getEac3SurroundExMode() {
    return eac3SurroundExMode;
  }

  public void setEac3SurroundExMode(Eac3SurroundExModeEnum eac3SurroundExMode) {
    this.eac3SurroundExMode = eac3SurroundExMode;
  }

  public Profile eac3DrcLineModeProfile(Eac3DrcLineModeProfileEnum eac3DrcLineModeProfile) {
    this.eac3DrcLineModeProfile = eac3DrcLineModeProfile;
    return this;
  }

   /**
   * Dynamic Range Control for Line Mode.
   * @return eac3DrcLineModeProfile
  **/
  @ApiModelProperty(value = "Dynamic Range Control for Line Mode.")
  public Eac3DrcLineModeProfileEnum getEac3DrcLineModeProfile() {
    return eac3DrcLineModeProfile;
  }

  public void setEac3DrcLineModeProfile(Eac3DrcLineModeProfileEnum eac3DrcLineModeProfile) {
    this.eac3DrcLineModeProfile = eac3DrcLineModeProfile;
  }

  public Profile eac3DrcRfModeProfile(Eac3DrcRfModeProfileEnum eac3DrcRfModeProfile) {
    this.eac3DrcRfModeProfile = eac3DrcRfModeProfile;
    return this;
  }

   /**
   * Dynamic Range Control for RF Mode.
   * @return eac3DrcRfModeProfile
  **/
  @ApiModelProperty(value = "Dynamic Range Control for RF Mode.")
  public Eac3DrcRfModeProfileEnum getEac3DrcRfModeProfile() {
    return eac3DrcRfModeProfile;
  }

  public void setEac3DrcRfModeProfile(Eac3DrcRfModeProfileEnum eac3DrcRfModeProfile) {
    this.eac3DrcRfModeProfile = eac3DrcRfModeProfile;
  }

  public Profile eac3DialogNormalization(Integer eac3DialogNormalization) {
    this.eac3DialogNormalization = eac3DialogNormalization;
    return this;
  }

   /**
   * Represents the volume level of dialog in the audio stream which can be used by a Dolby Digital decoder. This aids the decoder in matching volume between program sources. Minimum value is 1, maximum is 31.
   * @return eac3DialogNormalization
  **/
  @ApiModelProperty(value = "Represents the volume level of dialog in the audio stream which can be used by a Dolby Digital decoder. This aids the decoder in matching volume between program sources. Minimum value is 1, maximum is 31.")
  public Integer getEac3DialogNormalization() {
    return eac3DialogNormalization;
  }

  public void setEac3DialogNormalization(Integer eac3DialogNormalization) {
    this.eac3DialogNormalization = eac3DialogNormalization;
  }

  public Profile eac3RoomType(Eac3RoomTypeEnum eac3RoomType) {
    this.eac3RoomType = eac3RoomType;
    return this;
  }

   /**
   * Get eac3RoomType
   * @return eac3RoomType
  **/
  @ApiModelProperty(value = "")
  public Eac3RoomTypeEnum getEac3RoomType() {
    return eac3RoomType;
  }

  public void setEac3RoomType(Eac3RoomTypeEnum eac3RoomType) {
    this.eac3RoomType = eac3RoomType;
  }

  public Profile eac3MixingLevel(Integer eac3MixingLevel) {
    this.eac3MixingLevel = eac3MixingLevel;
    return this;
  }

   /**
   * Minimum value is 80, maximum is 111.
   * @return eac3MixingLevel
  **/
  @ApiModelProperty(value = "Minimum value is 80, maximum is 111.")
  public Integer getEac3MixingLevel() {
    return eac3MixingLevel;
  }

  public void setEac3MixingLevel(Integer eac3MixingLevel) {
    this.eac3MixingLevel = eac3MixingLevel;
  }

  public Profile eac3CopyrightProtected(Boolean eac3CopyrightProtected) {
    this.eac3CopyrightProtected = eac3CopyrightProtected;
    return this;
  }

   /**
   * Indicates whether the encoded bitstream is copyright protected.
   * @return eac3CopyrightProtected
  **/
  @ApiModelProperty(value = "Indicates whether the encoded bitstream is copyright protected.")
  public Boolean isEac3CopyrightProtected() {
    return eac3CopyrightProtected;
  }

  public void setEac3CopyrightProtected(Boolean eac3CopyrightProtected) {
    this.eac3CopyrightProtected = eac3CopyrightProtected;
  }

  public Profile eac3OriginalBitstream(Boolean eac3OriginalBitstream) {
    this.eac3OriginalBitstream = eac3OriginalBitstream;
    return this;
  }

   /**
   * Indicates whether the encoded bitstream is the master version, or a copy.
   * @return eac3OriginalBitstream
  **/
  @ApiModelProperty(value = "Indicates whether the encoded bitstream is the master version, or a copy.")
  public Boolean isEac3OriginalBitstream() {
    return eac3OriginalBitstream;
  }

  public void setEac3OriginalBitstream(Boolean eac3OriginalBitstream) {
    this.eac3OriginalBitstream = eac3OriginalBitstream;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Profile profile = (Profile) o;
    return Objects.equals(this.advancedFpsConversion, profile.advancedFpsConversion) &&
        Objects.equals(this.aspectMode, profile.aspectMode) &&
        Objects.equals(this.aspectRatio, profile.aspectRatio) &&
        Objects.equals(this.audioBitrate, profile.audioBitrate) &&
        Objects.equals(this.audioChannels, profile.audioChannels) &&
        Objects.equals(this.audioChannelsLayout, profile.audioChannelsLayout) &&
        Objects.equals(this.audioChannelsPerTrack, profile.audioChannelsPerTrack) &&
        Objects.equals(this.audioCodec, profile.audioCodec) &&
        Objects.equals(this.audioFormat, profile.audioFormat) &&
        Objects.equals(this.audioMap, profile.audioMap) &&
        Objects.equals(this.audioPid, profile.audioPid) &&
        Objects.equals(this.audioProfile, profile.audioProfile) &&
        Objects.equals(this.audioSampleRate, profile.audioSampleRate) &&
        Objects.equals(this.audioStreamId, profile.audioStreamId) &&
        Objects.equals(this.audioStreams, profile.audioStreams) &&
        Objects.equals(this.avcintraClass, profile.avcintraClass) &&
        Objects.equals(this.bufferSize, profile.bufferSize) &&
        Objects.equals(this.bufferSizeInPackets, profile.bufferSizeInPackets) &&
        Objects.equals(this.bumpers, profile.bumpers) &&
        Objects.equals(this.byteRangeRequests, profile.byteRangeRequests) &&
        Objects.equals(this.clipLength, profile.clipLength) &&
        Objects.equals(this.clipOffset, profile.clipOffset) &&
        Objects.equals(this.closedCaptions, profile.closedCaptions) &&
        Objects.equals(this.colorMetadata, profile.colorMetadata) &&
        Objects.equals(this.createdAt, profile.createdAt) &&
        Objects.equals(this.cropInputBottom, profile.cropInputBottom) &&
        Objects.equals(this.cropInputHeight, profile.cropInputHeight) &&
        Objects.equals(this.cropInputLeft, profile.cropInputLeft) &&
        Objects.equals(this.cropInputRight, profile.cropInputRight) &&
        Objects.equals(this.cropInputTop, profile.cropInputTop) &&
        Objects.equals(this.cropInputWidth, profile.cropInputWidth) &&
        Objects.equals(this.dashProfile, profile.dashProfile) &&
        Objects.equals(this.deinterlace, profile.deinterlace) &&
        Objects.equals(this.deinterlaceFrames, profile.deinterlaceFrames) &&
        Objects.equals(this.description, profile.description) &&
        Objects.equals(this.dnxhdType, profile.dnxhdType) &&
        Objects.equals(this.encryption, profile.encryption) &&
        Objects.equals(this.extname, profile.extname) &&
        Objects.equals(this.fps, profile.fps) &&
        Objects.equals(this.frameCount, profile.frameCount) &&
        Objects.equals(this.frameInterval, profile.frameInterval) &&
        Objects.equals(this.frameOffsets, profile.frameOffsets) &&
        Objects.equals(this.h264Level, profile.h264Level) &&
        Objects.equals(this.h264Profile, profile.h264Profile) &&
        Objects.equals(this.h264Tune, profile.h264Tune) &&
        Objects.equals(this.height, profile.height) &&
        Objects.equals(this.id, profile.id) &&
        Objects.equals(this.imxType, profile.imxType) &&
        Objects.equals(this.inputs, profile.inputs) &&
        Objects.equals(this.interlace, profile.interlace) &&
        Objects.equals(this.keyframeInterval, profile.keyframeInterval) &&
        Objects.equals(this.keyframeRate, profile.keyframeRate) &&
        Objects.equals(this.lang, profile.lang) &&
        Objects.equals(this.maxRate, profile.maxRate) &&
        Objects.equals(this.mergeAudioStreams, profile.mergeAudioStreams) &&
        Objects.equals(this.muteAudioTracks, profile.muteAudioTracks) &&
        Objects.equals(this.name, profile.name) &&
        Objects.equals(this.outputs, profile.outputs) &&
        Objects.equals(this.outputsPathFormat, profile.outputsPathFormat) &&
        Objects.equals(this.playlistType, profile.playlistType) &&
        Objects.equals(this.pmtPid, profile.pmtPid) &&
        Objects.equals(this.presetName, profile.presetName) &&
        Objects.equals(this.proresFormat, profile.proresFormat) &&
        Objects.equals(this.segmentTime, profile.segmentTime) &&
        Objects.equals(this.stack, profile.stack) &&
        Objects.equals(this.telestreamBlockSize, profile.telestreamBlockSize) &&
        Objects.equals(this.telestreamBlurScaler, profile.telestreamBlurScaler) &&
        Objects.equals(this.telestreamCostScaler, profile.telestreamCostScaler) &&
        Objects.equals(this.telestreamSearchLengthScaler, profile.telestreamSearchLengthScaler) &&
        Objects.equals(this.telestreamSubpelMode, profile.telestreamSubpelMode) &&
        Objects.equals(this.timeCode, profile.timeCode) &&
        Objects.equals(this.title, profile.title) &&
        Objects.equals(this.trailers, profile.trailers) &&
        Objects.equals(this.transportRate, profile.transportRate) &&
        Objects.equals(this.tsPids, profile.tsPids) &&
        Objects.equals(this.updatedAt, profile.updatedAt) &&
        Objects.equals(this.upscale, profile.upscale) &&
        Objects.equals(this.useEditlist, profile.useEditlist) &&
        Objects.equals(this.variants, profile.variants) &&
        Objects.equals(this.videoBitrate, profile.videoBitrate) &&
        Objects.equals(this.videoPid, profile.videoPid) &&
        Objects.equals(this.watermarkBottom, profile.watermarkBottom) &&
        Objects.equals(this.watermarkBumpers, profile.watermarkBumpers) &&
        Objects.equals(this.watermarkHeight, profile.watermarkHeight) &&
        Objects.equals(this.watermarkLeft, profile.watermarkLeft) &&
        Objects.equals(this.watermarkRight, profile.watermarkRight) &&
        Objects.equals(this.watermarkTop, profile.watermarkTop) &&
        Objects.equals(this.watermarkTrailers, profile.watermarkTrailers) &&
        Objects.equals(this.watermarkUrl, profile.watermarkUrl) &&
        Objects.equals(this.watermarkWidth, profile.watermarkWidth) &&
        Objects.equals(this.width, profile.width) &&
        Objects.equals(this.x264Options, profile.x264Options) &&
        Objects.equals(this.x265Options, profile.x265Options) &&
        Objects.equals(this.xdcamFormat, profile.xdcamFormat) &&
        Objects.equals(this.tachyonAllowRemovePulldown, profile.tachyonAllowRemovePulldown) &&
        Objects.equals(this.tachyonEnablePostPulldownFilter, profile.tachyonEnablePostPulldownFilter) &&
        Objects.equals(this.tachyonMediaHintIsCartoon, profile.tachyonMediaHintIsCartoon) &&
        Objects.equals(this.tachyonMediaHintHasChromaNoise, profile.tachyonMediaHintHasChromaNoise) &&
        Objects.equals(this.tachyonMoreSensitiveRemovePulldown, profile.tachyonMoreSensitiveRemovePulldown) &&
        Objects.equals(this.tachyonAllowAddStandardPd, profile.tachyonAllowAddStandardPd) &&
        Objects.equals(this.tachyonAllowAdd22pd, profile.tachyonAllowAdd22pd) &&
        Objects.equals(this.tachyonAllowAdd44pd, profile.tachyonAllowAdd44pd) &&
        Objects.equals(this.tachyonAllowAdd46pd, profile.tachyonAllowAdd46pd) &&
        Objects.equals(this.tachyonAllowAddEuroPd, profile.tachyonAllowAddEuroPd) &&
        Objects.equals(this.tachyonAllowAddAdaptivePd, profile.tachyonAllowAddAdaptivePd) &&
        Objects.equals(this.tachyonMotionAmount, profile.tachyonMotionAmount) &&
        Objects.equals(this.tachyonFallbackSize, profile.tachyonFallbackSize) &&
        Objects.equals(this.tachyonMblockSize, profile.tachyonMblockSize) &&
        Objects.equals(this.tachyonCutDetectionSensitivity, profile.tachyonCutDetectionSensitivity) &&
        Objects.equals(this.eac3EvolutionEnable, profile.eac3EvolutionEnable) &&
        Objects.equals(this.eac3BitstreamMode, profile.eac3BitstreamMode) &&
        Objects.equals(this.eac3NinetyDegreePhaseShift, profile.eac3NinetyDegreePhaseShift) &&
        Objects.equals(this.eac3ThreeDecibelAttenuation, profile.eac3ThreeDecibelAttenuation) &&
        Objects.equals(this.eac3EnableLfeLowPassFilter, profile.eac3EnableLfeLowPassFilter) &&
        Objects.equals(this.eac3AnalogToDigitalConverterType, profile.eac3AnalogToDigitalConverterType) &&
        Objects.equals(this.eac3StereoDownmixPreference, profile.eac3StereoDownmixPreference) &&
        Objects.equals(this.eac3LtRtCenterMixLevel, profile.eac3LtRtCenterMixLevel) &&
        Objects.equals(this.eac3LtRtSurroundMixLevel, profile.eac3LtRtSurroundMixLevel) &&
        Objects.equals(this.eac3LoRoCenterMixLevel, profile.eac3LoRoCenterMixLevel) &&
        Objects.equals(this.eac3LoRoSurroundMixLevel, profile.eac3LoRoSurroundMixLevel) &&
        Objects.equals(this.eac3SurroundExMode, profile.eac3SurroundExMode) &&
        Objects.equals(this.eac3DrcLineModeProfile, profile.eac3DrcLineModeProfile) &&
        Objects.equals(this.eac3DrcRfModeProfile, profile.eac3DrcRfModeProfile) &&
        Objects.equals(this.eac3DialogNormalization, profile.eac3DialogNormalization) &&
        Objects.equals(this.eac3RoomType, profile.eac3RoomType) &&
        Objects.equals(this.eac3MixingLevel, profile.eac3MixingLevel) &&
        Objects.equals(this.eac3CopyrightProtected, profile.eac3CopyrightProtected) &&
        Objects.equals(this.eac3OriginalBitstream, profile.eac3OriginalBitstream);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedFpsConversion, aspectMode, aspectRatio, audioBitrate, audioChannels, audioChannelsLayout, audioChannelsPerTrack, audioCodec, audioFormat, audioMap, audioPid, audioProfile, audioSampleRate, audioStreamId, audioStreams, avcintraClass, bufferSize, bufferSizeInPackets, bumpers, byteRangeRequests, clipLength, clipOffset, closedCaptions, colorMetadata, createdAt, cropInputBottom, cropInputHeight, cropInputLeft, cropInputRight, cropInputTop, cropInputWidth, dashProfile, deinterlace, deinterlaceFrames, description, dnxhdType, encryption, extname, fps, frameCount, frameInterval, frameOffsets, h264Level, h264Profile, h264Tune, height, id, imxType, inputs, interlace, keyframeInterval, keyframeRate, lang, maxRate, mergeAudioStreams, muteAudioTracks, name, outputs, outputsPathFormat, playlistType, pmtPid, presetName, proresFormat, segmentTime, stack, telestreamBlockSize, telestreamBlurScaler, telestreamCostScaler, telestreamSearchLengthScaler, telestreamSubpelMode, timeCode, title, trailers, transportRate, tsPids, updatedAt, upscale, useEditlist, variants, videoBitrate, videoPid, watermarkBottom, watermarkBumpers, watermarkHeight, watermarkLeft, watermarkRight, watermarkTop, watermarkTrailers, watermarkUrl, watermarkWidth, width, x264Options, x265Options, xdcamFormat, tachyonAllowRemovePulldown, tachyonEnablePostPulldownFilter, tachyonMediaHintIsCartoon, tachyonMediaHintHasChromaNoise, tachyonMoreSensitiveRemovePulldown, tachyonAllowAddStandardPd, tachyonAllowAdd22pd, tachyonAllowAdd44pd, tachyonAllowAdd46pd, tachyonAllowAddEuroPd, tachyonAllowAddAdaptivePd, tachyonMotionAmount, tachyonFallbackSize, tachyonMblockSize, tachyonCutDetectionSensitivity, eac3EvolutionEnable, eac3BitstreamMode, eac3NinetyDegreePhaseShift, eac3ThreeDecibelAttenuation, eac3EnableLfeLowPassFilter, eac3AnalogToDigitalConverterType, eac3StereoDownmixPreference, eac3LtRtCenterMixLevel, eac3LtRtSurroundMixLevel, eac3LoRoCenterMixLevel, eac3LoRoSurroundMixLevel, eac3SurroundExMode, eac3DrcLineModeProfile, eac3DrcRfModeProfile, eac3DialogNormalization, eac3RoomType, eac3MixingLevel, eac3CopyrightProtected, eac3OriginalBitstream);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Profile {\n");
    
    sb.append("    advancedFpsConversion: ").append(toIndentedString(advancedFpsConversion)).append("\n");
    sb.append("    aspectMode: ").append(toIndentedString(aspectMode)).append("\n");
    sb.append("    aspectRatio: ").append(toIndentedString(aspectRatio)).append("\n");
    sb.append("    audioBitrate: ").append(toIndentedString(audioBitrate)).append("\n");
    sb.append("    audioChannels: ").append(toIndentedString(audioChannels)).append("\n");
    sb.append("    audioChannelsLayout: ").append(toIndentedString(audioChannelsLayout)).append("\n");
    sb.append("    audioChannelsPerTrack: ").append(toIndentedString(audioChannelsPerTrack)).append("\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    audioFormat: ").append(toIndentedString(audioFormat)).append("\n");
    sb.append("    audioMap: ").append(toIndentedString(audioMap)).append("\n");
    sb.append("    audioPid: ").append(toIndentedString(audioPid)).append("\n");
    sb.append("    audioProfile: ").append(toIndentedString(audioProfile)).append("\n");
    sb.append("    audioSampleRate: ").append(toIndentedString(audioSampleRate)).append("\n");
    sb.append("    audioStreamId: ").append(toIndentedString(audioStreamId)).append("\n");
    sb.append("    audioStreams: ").append(toIndentedString(audioStreams)).append("\n");
    sb.append("    avcintraClass: ").append(toIndentedString(avcintraClass)).append("\n");
    sb.append("    bufferSize: ").append(toIndentedString(bufferSize)).append("\n");
    sb.append("    bufferSizeInPackets: ").append(toIndentedString(bufferSizeInPackets)).append("\n");
    sb.append("    bumpers: ").append(toIndentedString(bumpers)).append("\n");
    sb.append("    byteRangeRequests: ").append(toIndentedString(byteRangeRequests)).append("\n");
    sb.append("    clipLength: ").append(toIndentedString(clipLength)).append("\n");
    sb.append("    clipOffset: ").append(toIndentedString(clipOffset)).append("\n");
    sb.append("    closedCaptions: ").append(toIndentedString(closedCaptions)).append("\n");
    sb.append("    colorMetadata: ").append(toIndentedString(colorMetadata)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    cropInputBottom: ").append(toIndentedString(cropInputBottom)).append("\n");
    sb.append("    cropInputHeight: ").append(toIndentedString(cropInputHeight)).append("\n");
    sb.append("    cropInputLeft: ").append(toIndentedString(cropInputLeft)).append("\n");
    sb.append("    cropInputRight: ").append(toIndentedString(cropInputRight)).append("\n");
    sb.append("    cropInputTop: ").append(toIndentedString(cropInputTop)).append("\n");
    sb.append("    cropInputWidth: ").append(toIndentedString(cropInputWidth)).append("\n");
    sb.append("    dashProfile: ").append(toIndentedString(dashProfile)).append("\n");
    sb.append("    deinterlace: ").append(toIndentedString(deinterlace)).append("\n");
    sb.append("    deinterlaceFrames: ").append(toIndentedString(deinterlaceFrames)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dnxhdType: ").append(toIndentedString(dnxhdType)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    extname: ").append(toIndentedString(extname)).append("\n");
    sb.append("    fps: ").append(toIndentedString(fps)).append("\n");
    sb.append("    frameCount: ").append(toIndentedString(frameCount)).append("\n");
    sb.append("    frameInterval: ").append(toIndentedString(frameInterval)).append("\n");
    sb.append("    frameOffsets: ").append(toIndentedString(frameOffsets)).append("\n");
    sb.append("    h264Level: ").append(toIndentedString(h264Level)).append("\n");
    sb.append("    h264Profile: ").append(toIndentedString(h264Profile)).append("\n");
    sb.append("    h264Tune: ").append(toIndentedString(h264Tune)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imxType: ").append(toIndentedString(imxType)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    interlace: ").append(toIndentedString(interlace)).append("\n");
    sb.append("    keyframeInterval: ").append(toIndentedString(keyframeInterval)).append("\n");
    sb.append("    keyframeRate: ").append(toIndentedString(keyframeRate)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    maxRate: ").append(toIndentedString(maxRate)).append("\n");
    sb.append("    mergeAudioStreams: ").append(toIndentedString(mergeAudioStreams)).append("\n");
    sb.append("    muteAudioTracks: ").append(toIndentedString(muteAudioTracks)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    outputsPathFormat: ").append(toIndentedString(outputsPathFormat)).append("\n");
    sb.append("    playlistType: ").append(toIndentedString(playlistType)).append("\n");
    sb.append("    pmtPid: ").append(toIndentedString(pmtPid)).append("\n");
    sb.append("    presetName: ").append(toIndentedString(presetName)).append("\n");
    sb.append("    proresFormat: ").append(toIndentedString(proresFormat)).append("\n");
    sb.append("    segmentTime: ").append(toIndentedString(segmentTime)).append("\n");
    sb.append("    stack: ").append(toIndentedString(stack)).append("\n");
    sb.append("    telestreamBlockSize: ").append(toIndentedString(telestreamBlockSize)).append("\n");
    sb.append("    telestreamBlurScaler: ").append(toIndentedString(telestreamBlurScaler)).append("\n");
    sb.append("    telestreamCostScaler: ").append(toIndentedString(telestreamCostScaler)).append("\n");
    sb.append("    telestreamSearchLengthScaler: ").append(toIndentedString(telestreamSearchLengthScaler)).append("\n");
    sb.append("    telestreamSubpelMode: ").append(toIndentedString(telestreamSubpelMode)).append("\n");
    sb.append("    timeCode: ").append(toIndentedString(timeCode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    trailers: ").append(toIndentedString(trailers)).append("\n");
    sb.append("    transportRate: ").append(toIndentedString(transportRate)).append("\n");
    sb.append("    tsPids: ").append(toIndentedString(tsPids)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    upscale: ").append(toIndentedString(upscale)).append("\n");
    sb.append("    useEditlist: ").append(toIndentedString(useEditlist)).append("\n");
    sb.append("    variants: ").append(toIndentedString(variants)).append("\n");
    sb.append("    videoBitrate: ").append(toIndentedString(videoBitrate)).append("\n");
    sb.append("    videoPid: ").append(toIndentedString(videoPid)).append("\n");
    sb.append("    watermarkBottom: ").append(toIndentedString(watermarkBottom)).append("\n");
    sb.append("    watermarkBumpers: ").append(toIndentedString(watermarkBumpers)).append("\n");
    sb.append("    watermarkHeight: ").append(toIndentedString(watermarkHeight)).append("\n");
    sb.append("    watermarkLeft: ").append(toIndentedString(watermarkLeft)).append("\n");
    sb.append("    watermarkRight: ").append(toIndentedString(watermarkRight)).append("\n");
    sb.append("    watermarkTop: ").append(toIndentedString(watermarkTop)).append("\n");
    sb.append("    watermarkTrailers: ").append(toIndentedString(watermarkTrailers)).append("\n");
    sb.append("    watermarkUrl: ").append(toIndentedString(watermarkUrl)).append("\n");
    sb.append("    watermarkWidth: ").append(toIndentedString(watermarkWidth)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    x264Options: ").append(toIndentedString(x264Options)).append("\n");
    sb.append("    x265Options: ").append(toIndentedString(x265Options)).append("\n");
    sb.append("    xdcamFormat: ").append(toIndentedString(xdcamFormat)).append("\n");
    sb.append("    tachyonAllowRemovePulldown: ").append(toIndentedString(tachyonAllowRemovePulldown)).append("\n");
    sb.append("    tachyonEnablePostPulldownFilter: ").append(toIndentedString(tachyonEnablePostPulldownFilter)).append("\n");
    sb.append("    tachyonMediaHintIsCartoon: ").append(toIndentedString(tachyonMediaHintIsCartoon)).append("\n");
    sb.append("    tachyonMediaHintHasChromaNoise: ").append(toIndentedString(tachyonMediaHintHasChromaNoise)).append("\n");
    sb.append("    tachyonMoreSensitiveRemovePulldown: ").append(toIndentedString(tachyonMoreSensitiveRemovePulldown)).append("\n");
    sb.append("    tachyonAllowAddStandardPd: ").append(toIndentedString(tachyonAllowAddStandardPd)).append("\n");
    sb.append("    tachyonAllowAdd22pd: ").append(toIndentedString(tachyonAllowAdd22pd)).append("\n");
    sb.append("    tachyonAllowAdd44pd: ").append(toIndentedString(tachyonAllowAdd44pd)).append("\n");
    sb.append("    tachyonAllowAdd46pd: ").append(toIndentedString(tachyonAllowAdd46pd)).append("\n");
    sb.append("    tachyonAllowAddEuroPd: ").append(toIndentedString(tachyonAllowAddEuroPd)).append("\n");
    sb.append("    tachyonAllowAddAdaptivePd: ").append(toIndentedString(tachyonAllowAddAdaptivePd)).append("\n");
    sb.append("    tachyonMotionAmount: ").append(toIndentedString(tachyonMotionAmount)).append("\n");
    sb.append("    tachyonFallbackSize: ").append(toIndentedString(tachyonFallbackSize)).append("\n");
    sb.append("    tachyonMblockSize: ").append(toIndentedString(tachyonMblockSize)).append("\n");
    sb.append("    tachyonCutDetectionSensitivity: ").append(toIndentedString(tachyonCutDetectionSensitivity)).append("\n");
    sb.append("    eac3EvolutionEnable: ").append(toIndentedString(eac3EvolutionEnable)).append("\n");
    sb.append("    eac3BitstreamMode: ").append(toIndentedString(eac3BitstreamMode)).append("\n");
    sb.append("    eac3NinetyDegreePhaseShift: ").append(toIndentedString(eac3NinetyDegreePhaseShift)).append("\n");
    sb.append("    eac3ThreeDecibelAttenuation: ").append(toIndentedString(eac3ThreeDecibelAttenuation)).append("\n");
    sb.append("    eac3EnableLfeLowPassFilter: ").append(toIndentedString(eac3EnableLfeLowPassFilter)).append("\n");
    sb.append("    eac3AnalogToDigitalConverterType: ").append(toIndentedString(eac3AnalogToDigitalConverterType)).append("\n");
    sb.append("    eac3StereoDownmixPreference: ").append(toIndentedString(eac3StereoDownmixPreference)).append("\n");
    sb.append("    eac3LtRtCenterMixLevel: ").append(toIndentedString(eac3LtRtCenterMixLevel)).append("\n");
    sb.append("    eac3LtRtSurroundMixLevel: ").append(toIndentedString(eac3LtRtSurroundMixLevel)).append("\n");
    sb.append("    eac3LoRoCenterMixLevel: ").append(toIndentedString(eac3LoRoCenterMixLevel)).append("\n");
    sb.append("    eac3LoRoSurroundMixLevel: ").append(toIndentedString(eac3LoRoSurroundMixLevel)).append("\n");
    sb.append("    eac3SurroundExMode: ").append(toIndentedString(eac3SurroundExMode)).append("\n");
    sb.append("    eac3DrcLineModeProfile: ").append(toIndentedString(eac3DrcLineModeProfile)).append("\n");
    sb.append("    eac3DrcRfModeProfile: ").append(toIndentedString(eac3DrcRfModeProfile)).append("\n");
    sb.append("    eac3DialogNormalization: ").append(toIndentedString(eac3DialogNormalization)).append("\n");
    sb.append("    eac3RoomType: ").append(toIndentedString(eac3RoomType)).append("\n");
    sb.append("    eac3MixingLevel: ").append(toIndentedString(eac3MixingLevel)).append("\n");
    sb.append("    eac3CopyrightProtected: ").append(toIndentedString(eac3CopyrightProtected)).append("\n");
    sb.append("    eac3OriginalBitstream: ").append(toIndentedString(eac3OriginalBitstream)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

