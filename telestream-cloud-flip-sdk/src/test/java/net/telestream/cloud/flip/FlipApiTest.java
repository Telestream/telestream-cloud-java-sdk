/*
 * Flip API
 * Description
 *
 * OpenAPI spec version: 2.0.1
 * Contact: cloudsupport@telestream.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.telestream.cloud.flip;

import net.telestream.cloud.flip.ApiException;
import net.telestream.cloud.flip.CanceledResponse;
import net.telestream.cloud.flip.CloudNotificationSettings;
import net.telestream.cloud.flip.CopyProfileBody;
import net.telestream.cloud.flip.CountResponse;
import net.telestream.cloud.flip.CreateEncodingBody;
import net.telestream.cloud.flip.CreateVideoBody;
import net.telestream.cloud.flip.DeletedResponse;
import net.telestream.cloud.flip.Encoding;
import net.telestream.cloud.flip.EncodingSignedUrl;
import net.telestream.cloud.flip.EncodingSignedUrls;
import net.telestream.cloud.flip.Error;
import net.telestream.cloud.flip.Factory;
import net.telestream.cloud.flip.FactoryBody;
import net.telestream.cloud.flip.FactorySync;
import net.telestream.cloud.flip.FactorySyncBody;
import java.io.File;
import net.telestream.cloud.flip.PaginatedEncodingsCollection;
import net.telestream.cloud.flip.PaginatedFactoryCollection;
import net.telestream.cloud.flip.PaginatedProfilesCollection;
import net.telestream.cloud.flip.PaginatedVideoCollection;
import net.telestream.cloud.flip.PaginatedWorkflowsCollection;
import net.telestream.cloud.flip.Profile;
import net.telestream.cloud.flip.ProfileBody;
import net.telestream.cloud.flip.ResubmitVideoBody;
import net.telestream.cloud.flip.RetriedResponse;
import net.telestream.cloud.flip.SignedVideoUrl;
import net.telestream.cloud.flip.UpdateEncodingBody;
import net.telestream.cloud.flip.UploadSession;
import net.telestream.cloud.flip.Video;
import net.telestream.cloud.flip.VideoMetadata;
import net.telestream.cloud.flip.VideoUploadBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FlipApi
 */
@Ignore
public class FlipApiTest {

    private final FlipApi api = new FlipApi();

    
    /**
     * Cancels an Encoding.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelEncodingTest() throws ApiException {
        String id = null;
        String factoryId = null;
        CanceledResponse response = api.cancelEncoding(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Copies a given Profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyProfileTest() throws ApiException {
        String id = null;
        String factoryId = null;
        CopyProfileBody copyProfileBody = null;
        Boolean expand = null;
        Profile response = api.copyProfile(id, factoryId, copyProfileBody, expand);

        // TODO: test validations
    }
    
    /**
     * Creates an Encoding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createEncodingTest() throws ApiException {
        String factoryId = null;
        CreateEncodingBody createEncodingBody = null;
        Boolean screenshots = null;
        Boolean preciseStatus = null;
        Encoding response = api.createEncoding(factoryId, createEncodingBody, screenshots, preciseStatus);

        // TODO: test validations
    }
    
    /**
     * Creates a new factory
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createFactoryTest() throws ApiException {
        FactoryBody createFactoryBody = null;
        Boolean withStorageProvider = null;
        Factory response = api.createFactory(createFactoryBody, withStorageProvider);

        // TODO: test validations
    }
    
    /**
     * Creates a Profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProfileTest() throws ApiException {
        String factoryId = null;
        ProfileBody createProfileBody = null;
        Boolean excludeAdvancedServices = null;
        Boolean expand = null;
        Profile response = api.createProfile(factoryId, createProfileBody, excludeAdvancedServices, expand);

        // TODO: test validations
    }
    
    /**
     * Creates a Video from a provided source_url.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createVideoTest() throws ApiException {
        String factoryId = null;
        CreateVideoBody createVideoBody = null;
        Video response = api.createVideo(factoryId, createVideoBody);

        // TODO: test validations
    }
    
    /**
     * Creates a Workorder.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWorkorderTest() throws ApiException {
        String factoryId = null;
        String profileId = null;
        File file = null;
        String sourceUrl = null;
        api.createWorkorder(factoryId, profileId, file, sourceUrl);

        // TODO: test validations
    }
    
    /**
     * Deletes an Encoding from both Telestream Cloud and your storage. Returns an information whether the operation was successful.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEncodingTest() throws ApiException {
        String id = null;
        String factoryId = null;
        DeletedResponse response = api.deleteEncoding(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Deletes a given Profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProfileTest() throws ApiException {
        String id = null;
        String factoryId = null;
        DeletedResponse response = api.deleteProfile(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Deletes a Video object.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVideoTest() throws ApiException {
        String id = null;
        String factoryId = null;
        DeletedResponse response = api.deleteVideo(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Delete a video&#39;s source file.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVideoSourceTest() throws ApiException {
        String id = null;
        String factoryId = null;
        DeletedResponse response = api.deleteVideoSource(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Returns an Encoding object.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void encodingTest() throws ApiException {
        String id = null;
        String factoryId = null;
        Boolean screenshots = null;
        Boolean preciseStatus = null;
        Encoding response = api.encoding(id, factoryId, screenshots, preciseStatus);

        // TODO: test validations
    }
    
    /**
     * Returns a list of Encoding objects
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void encodingsTest() throws ApiException {
        String factoryId = null;
        String videoId = null;
        String status = null;
        String profileId = null;
        String profileName = null;
        Integer page = null;
        Integer perPage = null;
        Boolean screenshots = null;
        Boolean preciseStatus = null;
        PaginatedEncodingsCollection response = api.encodings(factoryId, videoId, status, profileId, profileName, page, perPage, screenshots, preciseStatus);

        // TODO: test validations
    }
    
    /**
     * Returns a number of Encoding objects created using a given factory.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void encodingsCountTest() throws ApiException {
        String factoryId = null;
        CountResponse response = api.encodingsCount(factoryId);

        // TODO: test validations
    }
    
    /**
     * Returns a collection of Factory objects.
     *
     * Returns a collection of Factory objects.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void factoriesTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Boolean withStorageProvider = null;
        PaginatedFactoryCollection response = api.factories(page, perPage, withStorageProvider);

        // TODO: test validations
    }
    
    /**
     * Returns a Factory object.
     *
     * Returns a Factory object.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void factoryTest() throws ApiException {
        String id = null;
        Boolean withStorageProvider = null;
        Factory response = api.factory(id, withStorageProvider);

        // TODO: test validations
    }
    
    /**
     * Returns a Factory&#39;s notification settings.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationsTest() throws ApiException {
        String factoryId = null;
        CloudNotificationSettings response = api.notifications(factoryId);

        // TODO: test validations
    }
    
    /**
     * Returns a Profile object.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileTest() throws ApiException {
        String idOrName = null;
        String factoryId = null;
        Boolean expand = null;
        Profile response = api.profile(idOrName, factoryId, expand);

        // TODO: test validations
    }
    
    /**
     * Returns a list of Encodings that belong to a Profile.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profileEncodingsTest() throws ApiException {
        String idOrName = null;
        String factoryId = null;
        PaginatedEncodingsCollection response = api.profileEncodings(idOrName, factoryId);

        // TODO: test validations
    }
    
    /**
     * Returns a collection of Profile objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void profilesTest() throws ApiException {
        String factoryId = null;
        Boolean excludeAdvancedServices = null;
        Boolean expand = null;
        Integer page = null;
        Integer perPage = null;
        PaginatedProfilesCollection response = api.profiles(factoryId, excludeAdvancedServices, expand, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Returns a collection of Video objects queued for encoding.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queuedVideosTest() throws ApiException {
        String factoryId = null;
        Integer page = null;
        Integer perPage = null;
        PaginatedVideoCollection response = api.queuedVideos(factoryId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Resubmits a video to encode.
     *
     * Resubmits the video to encode. Please note that this option will work only for videos in &#x60;success&#x60; status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resubmitVideoTest() throws ApiException {
        String factoryId = null;
        ResubmitVideoBody resubmitVideoBody = null;
        api.resubmitVideo(factoryId, resubmitVideoBody);

        // TODO: test validations
    }
    
    /**
     * Retries a failed encoding.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retryEncodingTest() throws ApiException {
        String id = null;
        String factoryId = null;
        RetriedResponse response = api.retryEncoding(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Returns a signed url pointing to an Encoding.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signedEncodingUrlTest() throws ApiException {
        String id = null;
        String factoryId = null;
        EncodingSignedUrl response = api.signedEncodingUrl(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Returns a list of signed urls pointing to an Encoding&#39;s outputs.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signedEncodingUrlsTest() throws ApiException {
        String id = null;
        String factoryId = null;
        EncodingSignedUrls response = api.signedEncodingUrls(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Returns a signed url pointing to a Video.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signedVideoUrlTest() throws ApiException {
        String id = null;
        String factoryId = null;
        SignedVideoUrl response = api.signedVideoUrl(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Toggles synchronisation settings.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void toggleFactorySyncTest() throws ApiException {
        String id = null;
        FactorySyncBody factorySyncBody = null;
        FactorySync response = api.toggleFactorySync(id, factorySyncBody);

        // TODO: test validations
    }
    
    /**
     * Updates an Encoding
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateEncodingTest() throws ApiException {
        String id = null;
        String factoryId = null;
        UpdateEncodingBody updateEncodingBody = null;
        Boolean screenshots = null;
        Boolean preciseStatus = null;
        Encoding response = api.updateEncoding(id, factoryId, updateEncodingBody, screenshots, preciseStatus);

        // TODO: test validations
    }
    
    /**
     * Updates a Factory&#39;s settings. Returns a Factory object.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFactoryTest() throws ApiException {
        String id = null;
        FactoryBody updateFactoryBody = null;
        Boolean withStorageProvider = null;
        Factory response = api.updateFactory(id, updateFactoryBody, withStorageProvider);

        // TODO: test validations
    }
    
    /**
     * Updates a Factory&#39;s notification settings.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateNotificationsTest() throws ApiException {
        String factoryId = null;
        CloudNotificationSettings cloudNotificationSettingsBody = null;
        CloudNotificationSettings response = api.updateNotifications(factoryId, cloudNotificationSettingsBody);

        // TODO: test validations
    }
    
    /**
     * Updates a given Profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        String id = null;
        String factoryId = null;
        ProfileBody updateProfileBody = null;
        Boolean excludeAdvancedServices = null;
        Boolean expand = null;
        Profile response = api.updateProfile(id, factoryId, updateProfileBody, excludeAdvancedServices, expand);

        // TODO: test validations
    }
    
    /**
     * Creates an upload session.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadVideoTest() throws ApiException {
        String factoryId = null;
        VideoUploadBody videoUploadBody = null;
        UploadSession response = api.uploadVideo(factoryId, videoUploadBody);

        // TODO: test validations
    }
    
    /**
     * Returns a Video object.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void videoTest() throws ApiException {
        String id = null;
        String factoryId = null;
        Video response = api.video(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Returns a list of Encodings that belong to a Video.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void videoEncodingsTest() throws ApiException {
        String id = null;
        String factoryId = null;
        Integer page = null;
        Integer perPage = null;
        Boolean screenshots = null;
        Boolean preciseStatus = null;
        PaginatedEncodingsCollection response = api.videoEncodings(id, factoryId, page, perPage, screenshots, preciseStatus);

        // TODO: test validations
    }
    
    /**
     * Returns a Video&#39;s metadata
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void videoMetadataTest() throws ApiException {
        String id = null;
        String factoryId = null;
        VideoMetadata response = api.videoMetadata(id, factoryId);

        // TODO: test validations
    }
    
    /**
     * Returns a collection of Video objects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void videosTest() throws ApiException {
        String factoryId = null;
        Integer page = null;
        Integer perPage = null;
        PaginatedVideoCollection response = api.videos(factoryId, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Returns a collection of Workflows that belong to a Factory.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void workflowsTest() throws ApiException {
        String factoryId = null;
        Integer page = null;
        Integer perPage = null;
        PaginatedWorkflowsCollection response = api.workflows(factoryId, page, perPage);

        // TODO: test validations
    }
    
}
